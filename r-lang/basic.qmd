# Основы языка R {#sec-r-lang-basic}

@bib-r-lang-tutorialspoint

@bib-r-lang-w3schools

## Переменные {#sec-r-lang-basic-variables-naming}

Правильное имя переменной состоит из букв, цифр и символов точки или подчеркивания. Имя переменной начинается с буквы или точки, за которыми не следует число.

+-------------------------+--------------+-------------------------------------------------------------------------+
| Имя переменной          | Допустимость | Объяснение                                                              |
+=========================+==============+=========================================================================+
| `var_name2.`            | да           | Состоит из букв, цифр, точки и знака подчеркивания                      |
+-------------------------+--------------+-------------------------------------------------------------------------+
| `var_name%`             | нет          | Есть символ '%'. Допускаются только точка(.) и знак подчеркивания.      |
+-------------------------+--------------+-------------------------------------------------------------------------+
| `2var_name`             | нет          | Начинается с цифры                                                      |
+-------------------------+--------------+-------------------------------------------------------------------------+
| `.var_name`, `var.name` | да           | Может начинаться с точки(.), но за точкой(.) не должна следовать цифра. |
+-------------------------+--------------+-------------------------------------------------------------------------+
| `.2var_name`            | нет          | За начальной точкой следует цифра                                       |
+-------------------------+--------------+-------------------------------------------------------------------------+
| `_var_name`             | нет          | Начинается с \_, что недопустимо                                        |
+-------------------------+--------------+-------------------------------------------------------------------------+

: Правила именования переменных {tbl-r-lang-basic-variables-naming}

::: callout-important
Рекомендуется не использовать точку в имени переменной
:::

```{r}
var_1 = 'Изучаем R'           
var_2 <- c('learn','R')   
'Изучаем R' -> var_3  
```

::: callout-important
Рекомендуется использовать оператор `<-`.
:::

Так как R интерпретируемый язык переменные можно удалять с помощью функции [`rm()`](https://rdrr.io/r/base/rm.html). После удаления обращение по имени `var_1` генерирует предупреждение.

```{r}
#| error: true
rm(var_1)
var_1
```

## Типы данных {#sec-r-lang-basic-data-types}

В отличие от других языков программирования, таких как C и java, в R переменные не объявляются как некоторый тип данных. Переменным присваиваются R-объекты, и тип данных R-объекта становится типом данных переменной. Существует множество типов R-объектов. Наиболее часто используемые из них:

-   [Вектор @sec-r-lang-basic-vector]
-   [Список @sec-r-lang-basic-list]
-   [Матрица @sec-r-lang-basic-matrix]
-   [Массивы @sec-r-lang-basic-array]
-   [Таблицы @sec-r-lang-basic-table]

Все объекты в R строятся на основе интерфейса вектор. Два основных типа которые реализуют этот интерфейс: [`list()`](https://rdrr.io/r/base/list.html) и [`vector()`](https://rdrr.io/r/base/vector.html) остальные R-объекты строятся на основе этих типов. Существует шесть типов [`typeof()`](https://rdrr.io/r/base/typeof.html) данных атомарных векторов.

+----------------+-------------------------------------------------+----------------------------+
| Тип данных     | Пример                                          | Проверка                   |
+================+=================================================+============================+
| Логический     | `TRUE`, `FALSE`                                 | ``` r                      |
|                |                                                 | typeof(TRUE)               |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | logical                    |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+
| Действительный | `12.3`, `5`, `999`                              | ``` r                      |
|                |                                                 | typeof(7.5)                |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | double                     |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+
| Целочисленный  | `2L`, `34L`, `0L`                               | ``` r                      |
|                |                                                 | typeof(2L)                 |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | integer                    |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+
| Комплексный    | `3+2i`                                          | ``` r                      |
|                |                                                 | typeof(2+5i)               |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | complex                    |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+
| Символьный     | `'a'`, `'good'`,`'TRUE'`                        | ``` r                      |
|                |                                                 | typeof('TRUE')             |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | character                  |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+
| Raw            | `'Hello'` is stored as `48` `65` `6c` `6c` `6f` | ``` r                      |
|                |                                                 | typeof(charToRaw('Hello')) |
|                |                                                 | ```                        |
|                |                                                 |                            |
|                |                                                 | ```                        |
|                |                                                 | raw                        |
|                |                                                 | ```                        |
+----------------+-------------------------------------------------+----------------------------+

: Базовые типы данных {#tbl-r-lang-basic-data-types}

## Вектор {#sec-r-lang-basic-vector}

Все данные в языке R векторные. Даже если определить численный литерал его внутреннее представление будет вектором.

```{r}
is.vector(1)
```

### Последовательности {#sec-r-lang-basic-vector-sequence}

Для объединения элементов в вектор используется функция [`c()`](https://rdrr.io/r/base/c.html) – *combine*. При комбинации элементов различных типов общий тип выводится по правилам (ссылка).

```{r}
a <- c(1,2,3)
a
```

Для задания целочисленных последовательностей могут использоваться например оператор двоеточия [`1:5`](https://rdrr.io/r/base/Colon.html),

```{r}
numbers <- 1:10
numbers
```

или функции [seq()](https://rdrr.io/r/base/seq.html)

```{r}
seq(5, 9, by = 0.4)
```

Повторить элементы вектора можно с помощью функции [`rep()`](https://rdrr.io/r/base/rep.html)

```{r}
rep(c(1,2,3), each = 3)
rep(c(1,2,3), times = 3)
```

Длина вектора получается функцией [`length()`](https://rdrr.io/r/base/length.html)

```{r}
v <- 1:5
length(v)
```

### Доступ к элементам {#sec-r-lang-basic-vector-indexing}

#### Оператор `[`

Оператор объект того же класса что и объект-оригинал. Может быть выделено **более 1** элемента!

```{r}
x <- 1:5
x[1]
x[2:5]
```

Логическая индексация

```{r}
x[x > 2]
```

Также можно изменять элементы вектора таким же образом

```{r}
x[1:2] <- c(6,7)
x
```

#### Оператор `[[`

Может быть выделен **только 1** элемент!

```{r}
#| error: true
x <- 1:5
x[[2]]
x[[3:5]]
```

## Список {#sec-r-lang-basic-list}

Списки - это объекты R, которые содержат элементы различных типов, такие как числа, строки, векторы и другие списки внутри них. Список также может содержать матрицу или функцию в качестве своих элементов. Список создается с помощью функции [`list()`](https://rdrr.io/r/base/list.html). Ниже приведен пример создания списка, содержащего строки, числа, векторы и логические значения.

```{r}
list_data <- list('Red', 'Green', c(21,32,11), TRUE, 51.23, 119.1)
list_data
```

Список совмещает в себе свойства списка и словаря из других языков программирования. Поэтому элементам мы можем задавать имена.

### Доступ к элементам {#sec-r-lang-basic-list-indexing}

#### Оператор `[`

Позволяет выбрать один или несколько элементов по индексу. Всегда возвращает тип списка

```{r}
x <- list(foo = 1:4, bar = 0.6)
x[1]
```

#### Оператор `[[`

Позволяет выбрать один элемент по индексу. Возвращает тип содержащегося элемента.

```{r}
x <- list(foo = 1:4, bar = 0.6)
x[[1]]
```

или по имени

```{r}
x <- list(foo = 1:4, bar = 0.6)
x[['bar']]
```

Оператор **`[[`** может принимать последовательность целых чисел и рекурсивно извлекать элементы из вложенного списка

```{r}
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1, 3)]]
x[[1]][[3]]
x[[c(2, 1)]]
```

#### Оператор `$`

**`$`** работает только с именами объектов.

```{r}
x <- list(foo = 1:4, bar = 0.6)
x$foo
```

## Матрицы {#sec-r-lang-basic-matrix}

Матрица – это специальный тип вектора в R, который имеет атрибут *dim*. *dim* – это вектор типа integer, состоящий из 2 элементов ( *nrow* - число строк и *ncol* - число столбцов). Матрицы заполняются по правилу: сверху вниз слева направо.

```{r}
m <- matrix(c(1, 2, 3, 4), ncol = 2, nrow = 2)
m
dim(m)
attributes(m)
```

Матрицы можно создавать с помощью функций **cbind** и **rbind**.

```{r}
x <- 1:3
y <- 10:12
cbind(x, y)
```

**array(data,dim)** -- функция для создания матрицы заданного размера.

```{r}
array(1:8,c(2,2,2))
```

### Доступ к элементам {#sec-r-lang-basic-matrix-indexing}

Доступ к элементам матриц осуществляется с использованием индексов в квадратных скобках – '**\[**'. Первый индекс – номер строки, второй индекс – номер столбца.

```{r}
x <- matrix(1:6, 2, 3)
x[1, 2]
x[2, 1]
```

Первый или второй индекс может отсутствовать. Тогда будет возвращена строка или столбец матрицы.

```{r}
x[1, ]
x[, 2]
```

По умолчанию возвращается вектор единичной длины того же класса что и исходный объект. Для получения объекта в виде матрицы необходимо установить параметр *drop*. Учет размерности данных -- **drop = FALSE**.

```{r}
x <- matrix(1:6, 2, 3)
x[1, 2, drop = FALSE]
x <- matrix(1:6, 2, 3)
x[1, ]
x[1, , drop = FALSE]
```

## Массивы {#sec-r-lang-basic-array}

### Доступ к элементам {sec-r-lang-basic-array-indexing}

## Таблицы {#sec-r-lang-basic-table}

Таблица (Data Frame)-- специальный тип списка, в котором каждый элемент имеет фиксированную длину. Используется для хранения табулированных данных. Каждая колонка может представлять различные типы данных, включая факторы. Data Frame имеют специализированный атрибут *row.names*, указывающий имена строк. Это помогает упростить аннотацию данных. Для создания Data Frame из табулированных данных используются функции **read.table** и **read.csv**. Для создания матрицы из Data Frame используется функция **data.matrix**. **data.frame** -- функция для создания Data Frame.

```{r}
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
nrow(x)
ncol(x)
```

## Преобразование объектов {#sec-r-lang-basic-cast}

Для преобразования объекта к другому типу используются функции семейства [`as.*`](https://rdrr.io/r/base/numeric.html)

```{r}
as.logical(c(-1, 0, 1))
as.numeric(c(TRUE, FALSE))
as.character(c(TRUE, FALSE))
```

## Векторные операции {#sec-r-lang-basic-vectorization}

В R можно осуществлять операции над векторами. Это позволяет значительно упростить программный код, не программировать циклы, ускорить процесс написания программ.

### Арифметические операторы {#sec-r-lang-basic-vectorization-arithmetic}

+--------------+---------------------------------------------------+--------------------------------+
| Оператор     | Описание                                          | Пример                         |
+==============+===================================================+================================+
| `+`          | Поэлементное сложение двух векторов               | ``` r                          |
|              |                                                   | v <- c(2, 5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v+t                            |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] 10.0  8.5  10.0            |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `-`          | Поэлементное вычитание второго вектора из первого | ``` r                          |
|              |                                                   | v <- c( 2,5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v - t                          |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] -6.0  2.5  2.0             |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `*`          | Поэлементное умножение двух векторов              | ``` r                          |
|              |                                                   | v <- c( 2,5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v * t                          |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] 16.0 16.5 24.0             |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `/`          | Поэлементно делит второй вектор на первый         | ``` r                          |
|              |                                                   | v <- c( 2,5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v / t                          |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] 0.250000 1.833333 1.500000 |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `%%`         | Остаток от поэлементного деления                  | ``` r                          |
|              |                                                   | v <- c(2, 5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v %% t                         |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] 2.0 2.5 2.0                |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `%/%`        | Целочисленное поэлементное деление                | ``` r                          |
|              |                                                   | v <- c( 2,5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v %/% t                        |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1] 0 1 1                      |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+
| `^`          | Поэлементное возведение в степень                 | ``` r                          |
|              |                                                   | v <- c( 2,5.5,6)               |
|              |                                                   | t <- c(8, 3, 4)                |
|              |                                                   | v ^ t                          |
|              |                                                   | ```                            |
|              |                                                   |                                |
|              |                                                   | ```                            |
|              |                                                   | [1]  256.000  166.375 1296.000 |
|              |                                                   | ```                            |
+--------------+---------------------------------------------------+--------------------------------+

: Векторные арифметические операции {#tbl-r-lang-basic-vectorization-arithmetic}

Аналогично векторные операции осуществляются над матрицами.

```{r}
x <- matrix(1:4, 2, 2);
y <- matrix(rep(10, 4), 2, 2)
x * y # поэлементно
x / y
```

Оператор [`%*%`](https://rdrr.io/r/base/matmult.html) используется для матричное перемножение по правилам линейной алгебры.

```{r}
x %*% y
```

### Операторы сравнения {#sec-r-lang-basic-vectorization-comparison}

В следующей таблице приведены операторы сравнения, поддерживаемые языком R. Каждый элемент первого вектора сравнивается с соответствующим элементом второго вектора. Результатом сравнения является булево значение.

+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| Оператор  | Описание                                                                                                 | Пример                      |
+===========+==========================================================================================================+=============================+
| `>`       | Проверяет, что каждый элемент первого вектора больше соответствующего элемента второго вектора.          | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v > t                       |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1] FALSE  TRUE FALSE FALSE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| `<`       | Проверяет, не меньше ли каждый элемент первого вектора соответствующего элемента второго вектора.        | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v < t                       |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1]  TRUE FALSE  TRUE FALSE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| `==`      | Проверяет, равен ли каждый элемент первого вектора соответствующему элементу второго вектора.            | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v == t                      |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1] FALSE FALSE FALSE  TRUE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| `<=`      | Проверяет, меньше или равен ли каждый элемент первого вектора соответствующему элементу второго вектора. | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v <= t                      |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1]  TRUE FALSE  TRUE  TRUE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| `>=`      | Проверяет, больше или равен ли каждый элемент первого вектора соответствующему элементу второго вектора. | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v >= t                      |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1] FALSE  TRUE FALSE  TRUE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+
| `!=`      | Проверяет, не равен ли каждый элемент первого вектора соответствующему элементу второго вектора.         | ``` r                       |
|           |                                                                                                          | v <- c(2,5.5,6,9)           |
|           |                                                                                                          | t <- c(8,2.5,14,9)          |
|           |                                                                                                          | v != t                      |
|           |                                                                                                          | ```                         |
|           |                                                                                                          |                             |
|           |                                                                                                          | ```                         |
|           |                                                                                                          | [1]  TRUE  TRUE  TRUE FALSE |
|           |                                                                                                          | ```                         |
+-----------+----------------------------------------------------------------------------------------------------------+-----------------------------+

: Векторные операторы сравнения {#tbl-r-lang-basic-vectorization-comparison}

### Логические {#sec-r-lang-basic-vectorization-logical}

В следующей таблице приведены логические операторы, поддерживаемые языком R. Они применимы только к векторам типа [`logical`](https://rdrr.io/r/base/logical.html), [`numeric`](https://rdrr.io/r/base/numeric.html) или [`complex`](https://rdrr.io/r/base/complex.html). Все числа больше 1 считаются логическим значением TRUE.

Каждый элемент первого вектора сравнивается с соответствующим элементом второго вектора. Результатом сравнения является булево значение.

+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| Оператор | Описание                                                                                                                                             | Пример                      |
+==========+======================================================================================================================================================+=============================+
| `&`      | Логический оператор И (Element-wise Logical AND).                                                                                                    | ``` r                       |
|          |                                                                                                                                                      | v <- c(3,1,TRUE,2+3i)       |
|          | Он объединяет каждый элемент первого вектора с соответствующим элементом второго вектора и выдает на выходе TRUE, если оба элемента TRUE.            | t <- c(4,1,FALSE,2+3i)      |
|          |                                                                                                                                                      | v&t                         |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      |                             |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      | [1]  TRUE  TRUE FALSE  TRUE |
|          |                                                                                                                                                      | ```                         |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| `|`      | Логическое ИЛИ по элементам.                                                                                                                         | ``` r                       |
|          |                                                                                                                                                      | v <- c(3,0,TRUE,2+2i)       |
|          | Он объединяет каждый элемент первого вектора с соответствующим элементом второго вектора и выдает на выходе TRUE, если один из элементов равен TRUE. | t <- c(4,0,FALSE,2+3i)      |
|          |                                                                                                                                                      | v|t                         |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      |                             |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      | [1]  TRUE FALSE  TRUE  TRUE |
|          |                                                                                                                                                      | ```                         |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| `!`      | Логический оператор NOT. Берет каждый элемент вектора и выдает противоположное логическое значение.                                                  | ``` r                       |
|          |                                                                                                                                                      | v <- c(3,0,TRUE,2+2i)       |
|          |                                                                                                                                                      | !v                          |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      |                             |
|          |                                                                                                                                                      | ```                         |
|          |                                                                                                                                                      | [1] FALSE  TRUE FALSE FALSE |
|          |                                                                                                                                                      | ```                         |
+----------+------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+

: Векторные логические операторы {#tbl-r-lang-basic-vectorization-logical-vector}

Логические операторы `&&` и `||` учитывают только первый элемент векторов и выдают на выходе вектор из одного элемента.

+----------+--------------------------------------------------------------------------------------------------------------------+-----------------------+
| Оператор | Описание                                                                                                           | Пример                |
+==========+====================================================================================================================+=======================+
| `&&`     | Оператор логического И. Берет первый элемент обоих векторов и выдает значение TRUE, только если оба элемента TRUE. | ``` r                 |
|          |                                                                                                                    | v <- c(3,0,TRUE,2+2i) |
|          |                                                                                                                    | t <- c(1,3,TRUE,2+3i) |
|          |                                                                                                                    | v&&t                  |
|          |                                                                                                                    | ```                   |
|          |                                                                                                                    |                       |
|          |                                                                                                                    | ```                   |
|          |                                                                                                                    | [1] TRUE              |
|          |                                                                                                                    | ```                   |
+----------+--------------------------------------------------------------------------------------------------------------------+-----------------------+
| `||`     | Оператор логического ИЛИ. Берет первый элемент обоих векторов и выдает TRUE, если один из них TRUE.                | ``` r                 |
|          |                                                                                                                    | v <- c(0,0,TRUE,2+2i) |
|          |                                                                                                                    | t <- c(0,3,TRUE,2+3i) |
|          |                                                                                                                    | v||t                  |
|          |                                                                                                                    | ```                   |
|          |                                                                                                                    |                       |
|          |                                                                                                                    | ```                   |
|          |                                                                                                                    | T[1] FALSE            |
|          |                                                                                                                    | ```                   |
+----------+--------------------------------------------------------------------------------------------------------------------+-----------------------+

: Скалярные векторные операторы {#tbl-r-lang-basic-vectorization-logical-scalar}

## Ветвление {#sec-r-lang-basic-branching}

### Оператор `if` {#sec-r-lang-basic-branching-if}

Оператор [`if`](https://rdrr.io/r/base/Control.html) состоит из булева выражения, за которым следует один или несколько операторов. Синтаксис оператора выглядит следующим образом

``` r
if(boolean_expression) {
   # Инструкции будут выполненны, если значение выражения TRUE
}
```

Если булево выражение равно `true`, то будет выполнен блок кода внутри оператора `if`. Если булево выражение равно `false`, то будет выполнен первый набор кода после конца оператора `if` (после закрывающей фигурной скобки).

### Оператор `else` {#sec-r-lang-basic-branching-else}

``` r
if(boolean_expression) {
   # Инструкции будут выполненны, если значение выражения TRUE
} else {
   # Инструкции будут выполненны, если значение выражения FALSE
}
```

Если булево выражение оценивается как истина, то будет выполнен блок кода `if`, в противном случае будет выполнен блок кода `else`.

```{r}
x <- c('what','is','truth')

if('Truth' %in% x) {
   'Truth is found'
} else {
   'Truth is not found'
}
```

За оператором `if` может следовать необязательный оператор `else if...else`, что очень удобно для проверки различных условий с помощью одного оператора `if...else if`

``` r
if(boolean_expression_1) {
   # Выполняется, если выражение 1 TRUE
} else if( boolean_expression_2) {
   # Выполняется, если выражение 2 TRUE
} else if( boolean_expression_3) {
   # Выполняется, если выражение 3 TRUE
} else {
   # Выполняется если все выражения FALSE
}
```

Например

```{r}
x <- c('what','is','truth')

if('Truth' %in% x) {
   'Truth is found the first time'
} else if ('truth' %in% x) {
   'truth is found the second time'
} else {
   'No truth found'
}
```

### Функция `switch` {#sec-r-lang-basic-branching-switch}

Оператор [`switch`](https://rdrr.io/r/base/switch.html) позволяет проверить переменную на равенство со списком значений. Каждое значение называется случаем, и переменная, которая включается, проверяется для каждого случая. Оператор записывается следующим образом:

``` r
switch(expression, case1, case2, case3, ....)
```

К оператору switch применяются следующие правила.

-   Если значение выражения не является символьной строкой, оно приводится к целому числу.
-   Внутри `switch` может быть любое количество операторов `case`. За каждым `case` следует значение, с которым нужно сравнить, и двоеточие.
-   Если значение целого числа находится между `1` и `nargs()-1` (максимальное количество аргументов), то соответствующий элемент условия `case` оценивается и возвращается результат.
-   Если выражение оценивается как символьная строка, то эта строка сопоставляется (в точности) с именами элементов.
-   Если имеется более одного совпадения, возвращается первый совпавший элемент.
-   Аргумент Default недоступен.
-   В случае отсутствия совпадения, если существует неименованный элемент ..., возвращается его значение. (Если таких аргументов более одного, возвращается ошибка).

Пример индексации

```{r}
switch(1, 'one', 'two')
```

Индексация с составными именованными выражениями

```{r}
switch(1, foo={'one'}, bar={'two'}) 
```

По имени с составными именованными выражениями

```{r}
switch('bar', foo={'one'}, bar={'two'})
```

## Циклы {#sec-r-lang-basic-cylce}

Оператор цикла позволяет выполнить оператор или группу операторов несколько раз.

### Типы циклов {#sec-r-lang-basic-cycle-types}

#### Цикл `for` {#sec-r-lang-basic-cycle-type-for}

Цикл [`for`](https://rdrr.io/r/base/Control.html) используется когда количество итераций известно до начала цикла.

``` r
for (value in vector) {
   statements
}
```

Циклы `for` в R особенно гибки, поскольку не ограничиваются целыми числами или даже числами на входе. Цикл может быть применен к символьным векторам, логическим векторам, спискам или выражениям.

```{r}
v <- LETTERS[1:4]
for ( i in v) {
   print(i)
}
```

#### Цикл `while` {#sec-r-lang-basic-cycle-type-while}

Цикл [`while`](https://rdrr.io/r/base/Control.html) выполняет один и тот же код снова и снова, пока не будет выполнено условие остановки.

``` r
while (test_expression) {
   statement
}
```

Ключевым моментом цикла `while` является то, что цикл может никогда не выполняться. Когда условие будет проверено и результат окажется ложным, тело цикла будет пропущено, и будет выполнен первый оператор после цикла `while`.

```{r}
v <- c('Hello','while loop')
cnt <- 2

while (cnt < 7) {
   print(v)
   cnt <- cnt + 1
}
```

#### Цикл `repeat` {#sec-r-lang-basic-cycle-type-repeat}

Цикл [`repeat`](https://rdrr.io/r/base/Control.html) выполняет один и тот же код снова и снова, пока не будет выполнено условие остановки.

``` r
repeat { 
   commands 
   if(condition) {
      break
   }
}
```

Пример

```{r}
v <- c('Hello','loop')
cnt <- 2

repeat {
   print(v)
   cnt <- cnt+1
   if(cnt > 5) {
      break
   }
}
```

### Операторы управления {#sec-r-lang-basic-cycle-control}

Операторы управления циклом изменяют обычную последовательность выполнения. Когда выполнение покидает область видимости, все автоматические объекты, которые были созданы в этой области, уничтожаются.

#### Ключевое слово `next` {#sec-r-lang-basic-cycle-control-next}

Оператор [`next`](https://rdrr.io/r/base/Control.html) в языке полезен, когда требуется пропустить текущую итерацию цикла, не завершая его. При встрече с next синтаксический анализатор R пропускает дальнейшие вычисления и начинает следующую итерацию цикла.

``` r
next
```

```{r}
v <- LETTERS[1:6]
for ( i in v) {
   
   if (i == "D") {
      next
   }
   print(i)
}
```

#### Ключевое слово `break` {#sec-r-lang-basic-cycle-control-break}

Оператор [`break`](https://rdrr.io/r/base/Control.html) в языке программирования R используется следующим образом.

-   Когда оператор `break` встречается внутри цикла, цикл немедленно завершается, и управление программой возобновляется в следующем операторе, следующем за циклом.
-   Он может быть использован для завершения случая в операторе `switch`.

``` r
break
```

Пример

```{r}
v <- c("Hello","loop")
cnt <- 2

repeat {
   print(v)
   cnt <- cnt + 1
	
   if(cnt > 5) {
      break
   }
}
```

## Функции {#sec-r-lang-basic-function}

Функция - это набор операторов, организованных вместе для выполнения определенной задачи. В R имеется большое количество встроенных функций, и пользователь может создавать свои собственные функции.

В R функция - это объект, поэтому интерпретатор R может передавать функции управление, а также аргументы, которые могут потребоваться функции для выполнения действий.

Функция, в свою очередь, выполняет свою задачу и возвращает управление интерпретатору, а также любой результат, который может быть сохранен в других объектах.

[Часто используемые функции](https://cran.r-project.org/doc/contrib/Short-refcard.pdf)

### Определение функции {#sec-r-lang-basic-function-defenition}

Функция R создается с помощью ключевого слова [`function`](https://rdrr.io/r/base/function.html). Основной синтаксис определения функции R выглядит следующим образом

``` r
function_name <- function(arg_1, arg_2, ...) {
   # Инструкции
   # Инструкции
}
```

### Элементы объекта функции {#sec-r-lang-basic-function-elements}

Функция состоит из

-   Имени – Функция хранится в среде R как объект с этим именем.

-   Аргументов – Когда функция вызывается, в неё передаетются значения аргументов. Аргументы необязательны, то есть функция может не содержать аргументов. Также аргументы могут иметь значения по умолчанию.

-   Тела функции – тело функции содержит набор выражений, которые определяют, что делает функция.

-   Возвращаемого значения – это последнее выражение в теле функции, которое должно быть вычислено.

В R есть множество встроенных функций, которые можно вызывать непосредственно в программе, не определяя их предварительно. Также можно создавать и использовать собственные функции, называемые функциями, определяемыми пользователем.

### Встроенные функции {#sec-r-lang-basic-function-integrated}

Простыми примерами встроенных функций являются [`seq()`](https://rdrr.io/r/base/seq.html), [`mean()`](https://rdrr.io/r/base/mean.html), [`sum()`](https://rdrr.io/r/base/sum.html), [`paste()`](https://rdrr.io/r/base/paste.html) и т. д. Они напрямую вызываются программами, написанными пользователем.

```{r}
seq(32,44)
mean(25:82)
sum(41:68)
```

### Пользовательские функции {#sec-r-lang-basic-function-user-defined}

Они определяют, что нужно пользователю, и после создания могут использоваться так же, как и встроенные функции. Ниже приведен пример создания и использования функции.

```{r}
f <- function(a) {
   for(i in 1:a) {
      b <- i^2
      print(b)
   }
}
```

### Вызов функции {#sec-r-lang-basic-function-call}

```{r}
f <- function(a) {
   for(i in 1:a) {
      b <- i^2
      print(b)
   }
}

f(6)
```

#### Без аргументов {#sec-r-lang-basic-function-call-no-args}

```{r}
f <- function() {
   for(i in 1:5) {
      print(i^2)
   }
}	

f()
```

#### Позиционные и именованные аргументы {#sec-r-lang-basic-function-call-with-args}

Аргументы вызова функции могут быть представлены в той же последовательности, что и определены в функции, или же они могут быть представлены в другой последовательности, но приписаны к именам аргументов.

```{r}
f <- function(a,b,c) {
   a * b + c
}

f(5,3,11)

f(a = 11, b = 5, c = 3)
```

#### Аргументы по умолчанию {#sec-r-lang-basic-function-integrated-call-default-args}

Можно задать значения аргументов в определении функции и вызвать функцию без указания аргументов, чтобы получить результат по умолчанию.

```{r}
f <- function(a = 3, b = 6) {
   a * b
}

f()

f(9,5)
```
