# Графические библиотеки

## plotly

Для построения интерактивных графиков используется современная библиотека plotly. Устанавливается командой *install.packages("plotly")*. Стоит выделить отличный от стандартного синтаксис вызова функции посторения графика. Строка "*x = \~x*" означает, что в качестве значений оси X (слева от знака равенства) будут использоваться значения заданные формулой (оператор *\~*). Сама формула *\~x* задаёт связь между зависимой переменной (слева от знака равенства, здесь опущенна) и независимыми. Например, в данном случае допустима конструкция "*x = \~x + y*".

Расказать про два варианта либо полного задания функции и построения ряда точек. Либо про задание формулой и кросс ссылка на продвинутый R.

::: callout-tip
Если график строится успешно, то рекомендуется игнорировать сообщения и предупреждения с помощью message и warning

```{{r}}
#| warning: false
#| message: false
```
:::

```{r}
#| warning: false
#| message: false

library(plotly)
x <- seq(0, 2*pi, length.out=100)
y <- sin(x)
plot_ly(x=x, y=~sin(x), type = 'scatter', mode = 'lines')
```

Для построения объемного графика требуется построить матрицу значений функции с помощью функции **outer**. Сказать про отсчёты, что можно и сократить, но тогда теряется масштаб по осям.

```{r}
#| warning: false
#| message: false

x <- y <- seq(0, pi/2, length.out = 100)
z <- outer(x, y, \(x,y) { sin(x*y) })  |> t()
plot_ly(x=x, y=y, z = z, type = "surface")
```

Контурный график. Больше объяснений и примеров

```{r}
x <- y <- seq(0, pi/2, length.out = 100)
z <- outer(x, y, \(x,y) { sin(x*y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
```

## GGPlot2
