```{r}
#| label: import
#| warning: false
#| message: false
#| include: false 

source('../util/doc_link.R')
source('../util/plotly_show.R')
source('../util/latex_format.R')
```

# Решатель LPSolve {#sec-r-tools-lpsolve}

::: {#exm-r-tools-lpsolve}
Рассмотрим задачу

$$
\begin{align*}
&\mathrm{Z}=11x_1+5x_2+4x_3 \rightarrow \max\\
&\begin{cases}
3x_1+2x_2+8x_3 \leq 11\\
2x_1+x_3 \leq 5 \\
3x_1+3x_2+x_3 \leq13 \\
x_1,x_2,x_3 \geq 0
\end{cases}
\end{align*}
$$ В данном случае решается задача макисимизации целевой функции $\mathrm{Z}=11x_1+5x_2+4x_3$. При ограничениях вида $\mathbf{Ax} \leq \mathbf{b}$, где

$$
\mathbf{A}=
\begin{pmatrix}
3 & 2 & 8 \\
2 & 0 & 1 \\
3 & 3 & 1
\end{pmatrix}
$$ матрица коэффициентов ограничений (матрица ограничений). $\mathbf{b}=(11,5,13)$ вектор-столбец правых частей.
:::

## lpSolve {#sec-r-tools-lpsolve-lpsolve}

### Установка {#sec-r-tools-lpsolve-lpsolve-install}

::: callout-important
Убедитесь в том, что **Rtools** установлены в системе @sec-enviroment-setup-rtools
:::

```{{r}}
install.packages('lpSolve')
```

### Модель {#sec-r-tools-lpsolve-lpsolve-model}

На основе примера @exm-r-tools-lpsolve. Для начала требуется определить целевую функцию $\mathrm{Z}$. В пакете `lpsolve` целевая функция задается как вектор @sec-r-lang-basic-vector коэффициентов.

```{r}
Z <- c(11, 5, 4)
```

Ограничения задаются в виде матрицы коэффициентов $\mathbf{A}$. Пакет может работать с общей формулировкой задачи @sec-linear-overview-general-problem, поэтому приведение к стандартной форме не требуется

```{r}
A <- rbind(c(3, 2, 8),
           c(2, 0, 1),
           c(3, 3, 1))
```

::: callout-tip
Если требуется задать ограничения вида $x_i\leq b_i, \quad \forall x_i$ то рекомендуется задать коэффициенты матрицы $\mathbf{A}$ ограничений (единичную матрицу @def-linear-algebra-matrix-identity) с помощью функции функцию `{r} diag() |> dl()`. Например

```{r}
diag(3)
```
:::

Правые части и знаки ограничений задаются отдельно

```{r}
B <- c(11, 5, 13)
S <- c('<=', '<=', '<=')
```

::: callout-tip
Если требуется задать много однотипных ограничен рекомендуемый применить функцию `{r} rep() |> dl()` . Например `{{r}} B <- rep('<=', 10)`.
:::

### Решение {#sec-r-tools-lpsolve-lpsolve-solution}

Для поиска решения вызывается функция `{r} lpSolve::lp() |> dl()`

```{r}
library(lpSolve)

optimum <- lp(           
  direction = 'max',     # <1>
  objective.in = Z,      # <2>
  const.mat = A,         # <3>
  const.dir = S,         # <4>
  const.rhs = B,         # <5>
  compute.sens = TRUE)   # <6>
optimum
```

1.  Задать направление оптимизации: максимизацию `'max'` или минимизацию `'min'`
2.  Задать целевую (objective) функцию вектором коэффициентов.
3.  Задать матрицу коэффициентов ограничений.
4.  Задать знаки ограничений символьным вектором
5.  Задать вектор правых частей ограничений.
6.  Дополнительно рассчитать чувствительность оптимального решения

Максимальное значение целевой функции получается

```{r}
optimum$objval
```

Это значение достигается при следующих значения переменных. Его можно получить из объекта решения `optimum` по ключу `solution`

```{r}
optimum$solution
```

::: callout-tip
Если в задаче много переменных, то иногда бывает трудно определить какие из них приняли ненулевые значения. Отображения результатов можно упростить используя функцию `{r} which() |> dl()`

Например

```{r}
x <- c(0,1,2,0,4,5,0,6,8,0,0,1)
x
```

Узнать индексы ненулевых элементов

```{r}
ind <- which(x!=0)
ind
```

И вывести только ненулевые элементы

```{r}
x[ind]
```
:::

### Анализ чувствительности оптимального решения {#sec-r-tools-lpsolve-lpsolve-sensetivity}

```{r}
#| include: false
sol <- optimum$solution

c1f <- optimum$sens.coef.from[[1]]
c1t <- optimum$sens.coef.to[[1]]

c2f <- optimum$sens.coef.from[[2]]
c2t <- optimum$sens.coef.to[[2]]

c3f <- optimum$sens.coef.from[[3]]
c3t <- optimum$sens.coef.to[[3]]

f <- optimum$objval
d1 <- optimum$duals[[1]]

d1f <- optimum$sens.coef.from[[1]]
d1t <- optimum$sens.coef.from[[1]]
```

#### Целевой функции {#sec-r-tools-lpsolve-lpsolve-sensetivity-objective}

Диапазон в кортом можно изменять коэффициенты целевой функции @sec-linear-sensetivity-objective не меняя при этом характер решения (точку, соответствующую оптимальному решению) можно определить следующим образом

```{r}
optimum$sens.coef.from
optimum$sens.coef.to
```

{{< include _lpsolve/objective.qmd >}}

#### Ограничений {#sec-r-tools-lpsolve-lpsolve-sensetivity-constraint}

Коэффициенты чувствительности по ограничениям @sec-linear-sensetivity-constraint (также встречается название **двойственные значения**).

```{r}
optimum$duals
```

{{< include _lpsolve/constraints.qmd >}}

Далее определяется диапазон в котором действительно данное двойственное значение.

```{r}
optimum$sens.coef.from
optimum$sens.coef.from
```

{{< include _lpsolve/constraints_summary.qmd >}}

### Целочисленная модель

Для решения задачи @exm-r-tools-lpsolve в целых числах при построении модели добавляется параметр `all.int=TRUE`. В этом случае анализ чувствительности @sec-r-tools-lpsolve-lpsolve-sensetivity не применим и параметр `compute.sens = TRUE` будет проигнорирован

```{r}
optimum <- lp(           
  direction = 'max',
  objective.in = Z,
  const.mat = A,
  const.dir = S,
  const.rhs = B,
  all.int = TRUE)
optimum
optimum$solution
```

Аналогично для решения задачи двоичного программирования устанавливается параметр `all.bin=TRUE`

```{r}
optimum <- lp(           
  direction = 'max',
  objective.in = Z,
  const.mat = A,
  const.dir = S,
  const.rhs = B,
  all.bin = TRUE)
optimum
optimum$solution
```

Задача целочисленного и двоичного программирования в пакете `lpSolve` решается методом ветвей и границ @sec-linear-integer-method-branch-and-bound.

## lpSolveAPI {#sec-r-tools-lpsolve-lpsolveapi}

### Установка

::: callout-important
Убедитесь в том, что **Rtools** установлены в системе @sec-enviroment-setup-rtools
:::

```{{r}}
install.packages('lpSolveAPI')
```

### Модель

На основе примера @exm-r-tools-lpsolve создаём объект модели задачи линейного программирования `{r} lpSolveAPI::make.lp() |> dl()` с 3 переменными и 0 ограничений (будут добавлены позднее).

```{r}
library(lpSolveAPI)
lprob <- make.lp(0, 3)
```

Далее выбирается тип оптимизации `{r} lpSolveAPI::lp.control() |> dl()`, в данном случае максимизация. Вывод функции подавляется с помощью `{r} invisible() |> dl()`, чтобы отменить печать информации на экран.

```{r}
invisible(lp.control(lprob, sense = 'max'))
```

Далее задаются ограничения. Ограничения матрицы $\mathbf{A}$ вводятся построчно `{r} lpSolveAPI::add.constraint() |> dl()`. По умолчанию на переменные накладывается условие $\forall{i}: x_i\geq0$

```{r}
add.constraint(lprob, c(3, 2, 8), '<=', 11)
add.constraint(lprob, c(2, 0, 1), '<=', 5)
add.constraint(lprob, c(3, 3, 1), '<=', 13)
```

Задание целевой функции `{r} lpSolveAPI::set.objfn() |> dl()`. Объект модели можно конструировать в произвольном порядке

```{r}
set.objfn(lprob, c(11, 5, 4))
```

Итоговое представление модели можно получить вызвав объект модели

```{r}
lprob
```

### Решение

Далее вызовом `{r} lpSolveAPI::solve() |> dl()` полученная модель решается. В случае успеха возвращается `status_code == 0`

```{r}
status_code <- solve(lprob)
status_code
```

Наилучшее значение целевой функции `{r} lpSolveAPI::get.objective() |> dl()`

```{r}
get.objective(lprob)
```

Значение переменных, при которых достигнуто максимальное значение целевой функции `{r} lpSolveAPI::get.variables() |> dl()`

```{r}
get.variables(lprob)
```

### Анализ чувствительности оптимального решения

```{r}
#| include: false
sol <- get.variables(lprob)

c1f <- get.sensitivity.obj(lprob)$objfrom[[1]]
c1t <- get.sensitivity.obj(lprob)$objtill[[1]]

c2f <- get.sensitivity.obj(lprob)$objfrom[[2]]
c2t <- get.sensitivity.obj(lprob)$objtill[[2]]

c3f <- get.sensitivity.obj(lprob)$objfrom[[3]]
c3t <- get.sensitivity.obj(lprob)$objtill[[3]]

f <- get.objective(lprob)
d1 <- get.sensitivity.rhs(lprob)$duals[[1]]

d1f <- get.sensitivity.rhs(lprob)$dualsfrom[[1]]
d1t <- get.sensitivity.rhs(lprob)$dualstill[[1]]
```

#### Целевая функция

Получим список с двумя ключами `objfrom` и `objtill` с помощью функции `{r} lpSolveAPI::get.sensitivity.obj() |> dl()`

```{r}
get.sensitivity.obj(lprob)
```

{{< include _lpsolve/objective.qmd >}}

#### Ограничения

Для анализа чувствительности ограничений применяется функция `{r} lpSolveAPI::get.sensitivity.rhs() |> dl()`.

```{r}
get.sensitivity.rhs(lprob)
```

{{< include _lpsolve/constraints.qmd >}}

{{< include _lpsolve/constraints_summary.qmd >}}

```         
set.objfn(LP, c(-mat[, 'score'], 0, 0))
set.type(LP, n+1, "binary")
set.type(LP, n+2, "binary")
set.bounds(LP, lower = c(mat[, 'lb'], 0, 0))
set.bounds(LP, upper = c(mat[, 'ub'], 1, 1))
```
