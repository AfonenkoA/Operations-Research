---
engine: knitr
---


# Язык моделирования MiniZinc

## Интерфейс `minizinc`

```{python}
import minizinc

# Create a MiniZinc model
model = minizinc.Model()
model.add_string("""
var -100..100: x;
int: a; int: b; int: c;
constraint a*(x*x) + b*x = c;
solve satisfy;
""")

# Transform Model into a instance
gecode = minizinc.Solver.lookup("gecode")
inst = minizinc.Instance(gecode, model)
inst["a"] = 1
inst["b"] = 4
inst["c"] = 0

# Solve the instance
result = inst.solve(all_solutions=True)
for i in range(len(result)):
    print("x = {}".format(result[i, "x"]))

```

## Интерфейс `zython`

```{python}
from zython import Model, var, range

class MyModel(Model):
    def __init__(self, a: int, b: int, c: int):
        self.a = var(int, a)
        self.b = var(int, b)
        self.c = var(int, c)
        self.x = var(range(-100, 101))
        self.constraints = [self.a * self.x ** 2 + self.b * self.x + self.c == 0]

model = MyModel(1, 4, 0)
result = model.solve_satisfy(all_solutions=True)
print(result)

```
