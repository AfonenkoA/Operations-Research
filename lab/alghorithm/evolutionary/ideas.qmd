
<https://github.com/DEAP/deap> Также можно строить генетику или реализовывать алгоритмы поверх этого фреймоврка.

```{r}
loadNamespace('ecr') |> invisible()
```

<https://cran.r-project.org/web/packages/GA/vignettes/GA.html>

Играться с параметрами подобрав примерно эквивалентное число вызовов. Или попробовать явно ограничить число вызовов. Подумать над permutation в GA. Также в 4 задаче реализовать свой поверх этой библиотеки самостоятельно определив операторы мутации, кросовера и выборки.
ализ

Для трёх различных функций (должны демонстрировать разное) и для алгоритмов пройтись и посчитать алгоритмов необходимо посчитать статистику по запускам, чтобы ответить, являются ли различия в алогитмах случайными или статистически обоснованными. Тесты статистической значимости крутить именно на отдельном методе. По вариантам или алгоритм роя или генетики или имитации отжига.

Сравнивая два алгоритма (набор параметров в одном алгоритме) используется t-тест @sec-evolutionary-stats-t-test

```{r}
#| include: false
smoof::makeAckleyFunction(2) |> smoof::getGlobalOptimum()
smoof::makeAckleyFunction(2) |> smoof::plot3D(package = 'plotly')
```

<https://www.sfu.ca/~ssurjano/optimization.html>
