# Эволюционная оптимизация {#sec-lab-alghorithm-evolutionary}

## Теория {#sec-lab-alghorithm-evolutionary-theory}

Изучить из лекций

-   Алгоритм имитации отжига
-   Алгоритм роя частиц
-   Генетические алгоритмы

Из методички

-   @sec-r-tools-solver-evolutionary-gensa
-   @sec-r-tools-solver-evolutionary-pso
-   @sec-r-tools-solver-evolutionary-ga

## Задания {#sec-lab-alghorithm-evolutionary-task}

::: callout-important
Для воспроизводимости результатов обязательно задавайте одинаковый seed random перед каждым запуском алгоритма
:::

### Глобальная оптимизация

@sec-r-tools-solver-evolutionary-analysis

adaptive momentum, посмотреть, какие алгоритмы используют оптимизаторы в нейросетях

Попробовать определить глобальный максимум функции с помощью вызова классического метода с разных начальных позиций. Применить различные алгоритмы эволюционный оптимизации (только вызов).

::: {.callout-note appearance="minimal"}
Уровень 1
:::

Ограничить объем отображаемых точен линейной, логарифмической и обратной логарифмической выборкой

Поиграться с и выбрать параметры для дальнейшего изучения более сложных функций

Вопросы к производительности, возможно использовать ggplot

<https://cran.r-project.org/web/packages/GA/vignettes/GA.html>

Играться с параметрами подобрав примерно эквивалентное число вызовов. Или попробовать явно ограничить число вызовов. Подумать над permutation в GA. Также в 4 задаче реализовать свой поверх этой библиотеки самостоятельно определив операторы мутации, кросовера и выборки.

<https://github.com/DEAP/deap> Также можно строить генетику или реализовывать алгоритмы поверх этого фреймоврка.

```{r}
loadNamespace('ecr') |> invisible()
```

### Сравнительный анализ

Для трёх различных функций (должны демонстрировать разное) и для алгоритмов пройтись и посчитать алгоритмов необходимо посчитать статистику по запускам, чтобы ответить, являются ли различия в алогитмах случайными или статистически обоснованными. Тесты статистической значимости крутить именно на отдельном методе. По вариантам или алгоритм роя или генетики или имитации отжига.

Сравнивая два алгоритма (набор параметров в одном алгоритме) используется t-тест @sec-evolutionary-stats-t-test

Сравнивая 3 и более используется f-test @sec-evolutionary-stats-f-test

::: callout-tip
Используйте @sec-r-tools-stats-t-test и @sec-r-tools-stats-f-test
:::

::: {.callout-note appearance="minimal"}
Уровень 2
:::

### Казино

Задать seed random одинаковый для всех итераций. Один алгоритм на выбор:

::: panel-tabset
#### Метод имитации отжига

В эволюционном из хелпа по функциям определить факторы влияющие на решение. Изменяя факторы получить правильное решение с наименьшим числом итераций

#### Метод роя частиц

Параметры памяти

#### Генетический алгоритм

Операторы скрещивания и мутации, размер поколения

#### Стохастический градиент

Параметры шага и т.д
:::

Запускать несколько раз с разными параметрами, смотреть сколько раз выпал действительный оптимум. В добавок на ближайшее время

Уровень 3
