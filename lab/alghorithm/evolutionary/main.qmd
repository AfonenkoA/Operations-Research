---
engine: knitr
---

# Эволюционная оптимизация {#sec-lab-alghorithm-evolutionary}

## Теория {#sec-lab-alghorithm-evolutionary-theory}

Изучить из лекций

-   Алгоритм имитации отжига
-   Алгоритм роя частиц
-   Генетические алгоритмы

Из методички

-   @sec-r-tools-solver-evolutionary-gensa
-   @sec-r-tools-solver-evolutionary-pso
-   @sec-r-tools-solver-evolutionary-ga

## Задания {#sec-lab-alghorithm-evolutionary-task}

Изучить процедуру анализа алгоритмов эволюционной оптимизации @sec-r-tools-solver-evolutionary-analysis.

:::: {#exr-lab-alghoritm-evolutionary-from-pit-to-bottom}
### Из ямы на дно

Переходим от методов локальной оптимизации к глобальной. Требуется найти минимум [функции Экли](https://en.wikipedia.org/wiki/Ackley_function) второго порядка:

1.  Используя один из методов нелинейного программирования используя случайное начальное приближение.
2.  Используя один из методов эволюционного программирования перечисленных выше.

Сравните число вычислений функции, использованное для нахождения минимума. Постройте график целевой функции и нанесите на него путь оптимизации.

::: callout-tip
В качестве реализации функции использовать `{r} smoof::makeAckleyFunction() |> dl()` . Для передачи её в библиотеку `nloptr` используйте @sec-r-tools-smoof-wrap
:::

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-alghoritm-evolutionary-fine-tuning}
### Дорабатываем напильником

Исследовать [функцию Растрыгина](https://www.sfu.ca/~ssurjano/rastr.html) 3 порядка. Для одного алгоритма на выбор для фиксированных параметров `seed-random` и начальной точки изменять параметры алгоритма, для получения глобального минимума с наименьшим числом итераций. Построить таблицу со значениями параметров и количества вычислений функции для достижения глобального оптимума.

::: panel-tabset
#### Метод имитации отжига

- `temperature` Initial value for temperature.
- `visiting.param` Parameter for visiting distribution.
- `acceptance.param` Parameter for acceptance distribution.

#### Метод роя частиц

- `s` The swarm size.
- `k` The exponent for calculating number of informants.
- `p` The average percentage of informants for each particle. A value of 1 implies that all particles are fully informed.
- `w` The exploitation constant.
- `c.p` The local exploration constant.
- `c.g` The global exploration constant.
- `d`  The diameter of the search space.
- `v.max` The maximal (euclidean) length of the velocity vector.

#### Генетический алгоритм

- `popSize` The population size.
- `pcrossover` The probability of crossover between pairs of chromosomes.
- `pmutation` The probability of mutation in a parent chromosome. Usually mutation occurs with a small probability.
- `elitism` The number of best fitness individuals to survive at each generation.
:::

::: callout-tip
В качестве реализации функции использовать `{r} smoof::makeRastriginFunction() |> dl()`.
:::

::: {.callout-note appearance="minimal"}
Уровень 2
:::
::::

:::: {#exr-lab-alghoritm-evolutionary-alghorithm-comparsion}
### Неслучайная случайность

Сравнить результативность методов для фиксированного `seed-random` и различных начальных приближений. С помощью T-статистики Стьюдента @sec-evolutionary-stats-t-test и @sec-r-tools-stats-t-test сделать заключение о том, чем обусловлено различие выборок: принципиальным отличием в эффективности алгоритмов или случайными отклонениями. В качестве выборки использовать вектор полученных значений целевой функции. Определить факторы влияющие на решение. Изменяя факторы получить правильное решение с наименьшим числом итераций

::: panel-tabset
#### Вариант 1

@sec-r-tools-solver-evolutionary-gensa и @sec-r-tools-solver-evolutionary-pso

#### Вариант 2

@sec-r-tools-solver-evolutionary-gensa и @sec-r-tools-solver-evolutionary-ga

#### Вариант 3

 @sec-r-tools-solver-evolutionary-ga и @sec-r-tools-solver-evolutionary-pso
:::

::: callout-tip
В качестве реализации функции использовать `{r} smoof::makeSchwefelFunction() |> dl()`.
:::

::: {.callout-note appearance="minimal"}
Уровень 3
:::
::::

:::: {#exr-lab-alghoritm-evolutionary-parameter-comparsion}
### Вращайте барабан!

Для [функции Шафера N2](https://www.sfu.ca/~ssurjano/schaffer2.html) для одного алгоритма на выбор (@exr-lab-alghoritm-evolutionary-fine-tuning) сравнить 3 набора параметров. С помощью F статистики Фишера сделать вывод о статистической значимости различий эффективности алгоритмов @sec-evolutionary-stats-f-test и @sec-r-tools-stats-f-test.

::: callout-tip
В качестве реализации функции использовать `{r} smoof::makeSchafferN2Function() |> dl()`.
:::

::: {.callout-note appearance="minimal"}
Уровень 3
:::
::::
