---
cache: false
freeze: false
engine: knitr
format:
  html:
    number-depth: 3
    toc-depth: 4
---

# Эволюционная оптимизация. Телекомания {#sec-lab-extra-evolutionary-telecom}

```{r}
#| include: false
source('tele.R')
tele <- hdf5r::H5File$new('tele.h5', mode = 'r')
pop_mat <- tele[['Population']]$read()
alt_mat <- tele[['Altitude']]$read()
pop <- interp(pop_mat)
alt <- interp(alt_mat)
pop_count <- sum(pop_mat) %/% 1000
```

Телекомпания хочет разместить свои вышки в городе с населением `{r} pop_count` тыс. человек. Схема районов города вместе с пригородом представлена на рисунке @fig-lab-evolutionary-tele-city. Плотность населения в городе задаётся функцией $P(x,y)$ и представлена на рисунке @fig-lab-evolutionary-tele-info-1. Топографическая карта города задаётся функцией $A(x,y)$ и представлена на рисунке @fig-lab-evolutionary-tele-info-1. Цель компании разместить свои вышки таким образом, чтобы обслуживать максимальное количество абонентов. Возможность подключения абонента зависит от качества сигнала, которое определяется взаимным расположением его и передатчика.

![Схема районов](city.png){#fig-lab-evolutionary-tele-city fig-align="left"}

```{r}
#| label: fig-lab-evolutionary-tele-info
#| layout-ncol: 2
#| echo: false
#| fig-align: center
#| fig-cap: 
#|   - "Плотность населения"
#|   - "Карта высот"

plotly::plot_ly(z = log(pop_mat), type = 'surface') |> pshow()
plotly::plot_ly(z = alt_mat, type = 'surface') |> pshow()
```

## Задача {#sec-lab-extra-evolutionary-telecom-problem}

**Определите** оптимальное положение вышек и число подключенных абонентов при условии:

### Часть 1. Одна вышка

Установив одну вышку

### Часть 2. Две вышки

Установив две вышки. Абонент может подключаться только к одной вышке (при перекрытии число абонентов не суммируется). Необходимо разместить вышки таким образом, чтобы максимизировать количество подключенных абонентов $M$.

### Часть 3. Ограничения

Вышки нельзя размещать территории на школ, больниц и других учреждений (красные области на @fig-lab-evolutionary-tele-city-ban).

![Схема с ограничениями](city-ban.png){#fig-lab-evolutionary-tele-city-ban fig-align="left"}

Запрещённые области заданы координатами углов прямоугольника

```{r}
#| echo: false

readr::read_csv('ban.csv',col_types = 'i') |> 
  head() |> 
  knitr::kable()
```
```{{r}}
tele <- hdf5r::H5File$new('tele.h5', mode = 'r')
pop_mat <- tele[['Population']]$read()
alt_mat <- tele[['Altitude']]$read()
```

:::: {.content-visible when-format="html"}
::: {.callout appearance="minimal"}
⤓ [tele.h5](tele.h5)

⤓ [ban.csv](ban.csv)
:::
::::

:::: {.content-visible unless-format="html"}
::: {.callout appearance="minimal"}
`\faFile*[regular].`{=latex} [tele.hdf5](lab/extra/evolutionary/tele.hdf5)

`\faFile*[regular].`{=latex} [ban.csv](lab/extra/evolutionary/ban.csv)
:::
::::

## Формализация {#sec-lab-extra-evolutionary-telecom-model}

Евклидово расстояние $D$ между точками $p_1(x,y)$ и $p_2(x,y)$

$$
D(p_1,p_2)=D(\{x_1,y_1\},\{x_2,y_2\})=\sqrt{{(x_2-x_1)}^2+{(y_2-y_1)}^2}
$$

### Пространство {#sec-lab-extra-evolutionary-telecom-model-region}

::: panel-tabset
#### Непрерывный {#sec-lab-extra-evolutionary-telecom-model-region-continuous}

```{r}
#| include: false
d <- continious_xy(alt_mat)
```

Определим непрерывные координатные переменные переменные:

$$
\begin{aligned}
`{r} d$x$min` \leq x \leq `{r} d$x$max` \\
`{r} d$y$min` \leq y \leq `{r} d$y$max`
\end{aligned}
$$ 

Тогда точки, в которых находится передатчик (трансмиттер) $t$ и приёмник (ресивер) $r$ принадлежат пространству

$$
t,r \in (`{r} d$x$min`,`{r} d$x$max`)\times(`{r} d$y$min`,`{r} d$y$max`)
$$

#### Дискретный {#sec-lab-extra-evolutionary-telecom-model-region-discrete}

Определим индексные координатные переменные:

$$
\begin{aligned}
x = 1..`{r} nrow(alt_mat)`\\
y = 1..`{r} ncol(alt_mat)`
\end{aligned}
$$ Тогда точки, в которых находится передатчик (трансмиттер) $t$ и приёмник (ресивер) $r$ принадлежат пространству

$$
t,r \in \{1..`{r} nrow(alt_mat)` \}\times \{1..`{r} ncol(alt_mat)` \}
$$
:::

### Сигнал {#sec-lab-extra-evolutionary-telecom-model-signal}

Мощность сигнала от вышки в точке $r(x,y)$ обозначается функцией $S(t,r)$ и падает обратно пропорционально квадрату расстояния $D(t,r)$ от передатчика ($t$) до абонента ($r$) и зависит от экранирования сигнала. Абонент может смотреть телевизор, если мощность его сигнала $S(t,r) \geq 5\cdot10^{-4}$. И в случае дискретного, и в случае непрерывного сигнала его мощность в точке $r$ можно записать используя коэффициент экранирования и расстояние:

$$
S(t,r) = \frac{Scr(t,r)}{D(t,r)^2}
$$

### Коэффициент экранирования {#sec-lab-extra-evolutionary-telecom-model-screening}

```{r}
#| include: false

tr <- c(80,90)
re <- c(5,5)
atr <- round(alt(tr))
are <- round(alt(re))
```

Пусть передатчик (трансмиттер) установлен в точке $t(`{r} tr[[1]]`,`{r} tr[[2]]`)$, а абонент (ресивер) находится в точке $r(`{r} re[[1]]`,`{r} re[[2]]`)$. Рассмотрим путь, который должен преодолеть сигнал. Передатчик установлен на высоте $`{r} atr`$ (справа), а абонент $`{r} are`$ (слева), если провести прямую между ними, то вся земля, которая находится выше этой прямой будет экранировать (ослаблять) сигнал:

```{r}
#| echo: false

t <- seq(0, 1, length.out = 100)
a <- sapply(t, \(t)  alt((tr - re) * t + re))
p <- sapply(t, \(t)  (alt(tr) - alt(re)) * t + alt(re))

plotly::plot_ly(
  x = t,
  y = a,
  type = 'scatter',
  mode = 'lines',
  name = 'высота'
) |>
  plotly::add_trace(x = t, y = p, name = 'передача') |>
  add_segments(t, a, p) |> 
  pshow()
```

Экранирование обознается функцией $Scr(t,r)$ экспоненциально зависит от длины экранирования $L_{Scr}$ --- суммарного расстояния, которое сигнал проходит "под землей".

$$
Scr(t,r) = \exp{\biggl(- \frac{ L_{Scr}}{40} \biggr)}
$$

Уравнение прямой $f$ соединяющей приёмник с передатчиком можно записать в параметрическом виде (параметр $p \in (0,1)$): <!-- во всём остальном коде параметр называется t -->

$$
\begin{cases}
x(p) = (t_x-r_x)\cdot p + r_x\\
y(p) = (t_y-r_y)\cdot p + r_y
\end{cases}
$$

И значение высоты вдоль прямой высоты:

$$
AL(p) = \bigl( A(t_x,t_y) - A(r_x,r_y) \bigr)\cdot p + A(r_x,r_y)
$$

::: panel-tabset
#### Непрерывный {#sec-lab-extra-evolutionary-telecom-model-screening-continuous}

Длину экранирования можно вычислить с помощью формулы длины дуги кривой

$$
L=\int{\sqrt{1+{(f'(x))}^2}dx}
$$

соответственно

$$
L_{Scr} = \int_0^1
\sqrt{1+{\bigl(AL'(p)\bigr)}^2}\cdot
{\begin{cases}
1,\text{ если }AL(p) \leq A(x(p),y(p))\\
0,\text{ инчае }
\end{cases}}dp
$$

#### Дискретный {#sec-lab-extra-evolutionary-telecom-model-screening-discrete}

Мы можем построить дискретную прямую из точки $t$ в точку $r$ (например с помощью [алгоритма Брезенхэма](https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%91%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%85%D1%8D%D0%BC%D0%B0)) получив множество точек $L_i=\{x_i,y_i\}, \, \forall i$ вдоль которых распространяется сигнал от передатчика к абоненту.

```{r}
#| echo: false
#| warning: false
#| message: false

m <- AFM::getBresenham2DSegment(tr[[1]],tr[[2]],re[[1]],re[[2]]) |>
  as.matrix()

tibble::as_tibble(m) |>
  head() |>
  knitr::kable()
```

Тогда путь на матрице выделен красной прямой

```{r}
#| echo: false
library(plot.matrix)

show_m <- alt_mat
show_m[m] <- NA
plot(
  show_m,
  na.col = 'red',
  col = terrain.colors,
  border = NA,
  key = list(
    side = 4,
    font = 2,
    cex.axis = 0.75
  ),
  fmt.key = "%.2f",
  polygon.key = NULL ,
  axis.key = NULL,
  spacing.key = c(3, 2, 2)
)
```

<!-- https://cran.r-project.org/web/packages/plot.matrix/vignettes/plot.matrix.html -->

Теперь для каждой точки мы можем проверить находится ли она под землёй: получим множество подземных точек.

$$
U_i = \{x_i,y_i\},\, \text{если} \, AL(x_i,y_i) \leq A(x_i,y_i) \, \forall i
$$

Тогда итоговую длину экранирования вычислим как отношение помеченных точек к всем умноженное на евклидово расстояние между приёмником и передатчиком

$$
L_{Scr} = \frac{|U_i|}{|L_i|} D(r,t)
$$ 

где $|\cdot|$ обознается мощность (число элементов) множества.
:::

### Подключенные абоненты {#sec-lab-extra-evolutionary-telecom-model-user}

Абонент считается подключенным, если мощность сигнала от вышки превышает заданный порог.

$$
M(t,r) = 
\begin{cases}
P(r), &если \, S(t,r) \geq 5\cdot10^{-4}\\
0, & инчае
\end{cases}
$$

В случае двух вышек функция $M(t_1,t_2,r)$ запишется следующим образом

$$
M(t,r) = 
\begin{cases}
P(r), &если \, S(t_1,r) \geq 5\cdot10^{-4}\\
P(r), &если \, S(t_2,r) \geq 5\cdot10^{-4}\\
0, & инчае
\end{cases}
$$

Функция $M(t,r)$ -- плотность населения в точке $r$ принимающих сигнал от передатчика из точки $t$. Итоговое число абонентов, подключенных к передатчику, установленному в точке $t$ определяется суммированием по всем положениям абонентов $r(x,y)$ из области определения определяется следующим образом

::: panel-tabset
#### Непрерывный {#sec-lab-extra-evolutionary-telecom-model-user-continuous}

$$
M(t) = \iint M(t,r=\{x,y\}) dxdy
$$

#### Дискретный {#sec-lab-extra-evolutionary-telecom-model-user-discrete}

$$
M(t) = \sum_x \sum_y M(t,r = \{x,y\})
$$
:::

### Целевая функция {#sec-lab-extra-evolutionary-telecom-model-objective}

Максимизировать целевую функцию -- число подключенных абонентов

$$
\max{M(t)}
$$


### Реализация {#sec-lab-extra-evolutionary-telecom-model-implementation}

Основываясь на опыте, полученном при выполнении работ по темам нелинейное и эволюционное программирование выбрать подходящий способ решения.

::::: callout-tip

::: panel-tabset
#### Непрерывный {#sec-lab-extra-evolutionary-telecom-model-implementation-continuous}

Могут пригодиться функции интерполяции `{r} pracma::interp2() |> dl()` и интегрирования `{r} pracma::integral2() |> dl()`.

#### Дискретный {#sec-lab-extra-evolutionary-telecom-model-implementation-discrete}

Реализацию алгоритма Брезенхема можно взять из пакета `{r} AFM::getBresenham2DSegment() |> dl()`
:::

:::::

::: {.callout-note appearance="minimal"}
Уровень 4
:::
