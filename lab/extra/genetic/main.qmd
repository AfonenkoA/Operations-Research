---
engine: knitr
cache: false
freeze: false
---

```{r}
#| include: false
1
```

# Генетический алгоримт. Материализованные представления {#sec-lab-extra-genetic-materialized-view}

Хранилище данных (data warehousing) — это подход к интеграции данных из множества, возможно, очень больших, распределённых и неоднородных баз данных и других источников информации. Хранилище данных (DW) представляет собой репозиторий (хранилище) интегрированной информации, доступной для запросов и анализа. Чтобы избежать обращения к исходным источникам данных и повысить эффективность выполнения запросов к DW, некоторые промежуточные результаты обработки запросов сохраняются в самом хранилище. Эти промежуточные результаты называются материализованными представлениями (materialized views). На достаточно абстрактном уровне хранилище данных можно рассматривать как набор материализованных представлений над данными, извлечёнными из распределённых неоднородных баз данных. Существует множество исследовательских задач, связанных с DW, среди которых одной из самых сложных является задача выбора материализованных представлений. С одной стороны, материализованные представления ускоряют обработку запросов. С другой -- они требуют обновления при изменениях в источниках данных. Следовательно, при выборе материализованных представлений необходимо учитывать две категории затрат: затраты на обработку запросов и затраты на обслуживание (обновление) материализованных представлений. Нас интересует следующий вопрос: какие представления следует материализовать, чтобы сумма затрат на выполнение запросов и обслуживание представлений была минимальной?

Выбор материализованных представлений представляет собой сложный компромисс между производительностью выполнения запросов и затратами на обслуживание.

-   Материализация всех представлений в хранилище данных (DW) обеспечивает наилучшую производительность, но сопровождается наивысшими затратами на обслуживание представлений.
-   Оставление всех представлений виртуальными приведёт к минимальным затратам на их обслуживание, но к худшей производительности запросов. Под "виртуальными" в данном контексте подразумевается, что никакие промежуточные результаты не сохраняются в хранилище данных.
-   Возможен также смешанный подход, при котором часть представлений материализуется (например, те, которые используются совместно), а остальные остаются виртуальными. Таким образом можно достичь оптимального (или близкого к оптимальному) баланса между приростом производительности и затратами на обслуживание.

К сожалению, доказано, что задача проектирования выбора материализованных представлений является NP-трудных. Поэтому на практике приходится использовать эвристику для нахождения приближённого к оптимальному решения. Задача, рассматриваемая в далее, формулируется следующим образом: на основе множества часто используемых запросов к хранилищу данных (DW) необходимо выбрать набор представлений для материализации таким образом, чтобы суммарные затраты на выполнение запросов и обслуживание были минимальны. Рассматриваемая задача связана с тремя различными аспектами:

1.  Оптимизации выполнения одного запроса @sec-lab-extra-genetic-materialized-view-local-query
2.  Оптимизация нескольких запросов одновременно @sec-lab-extra-genetic-materialized-view-global-query
3.  Выбор материализованных представлений @sec-lab-extra-genetic-materialized-view-selection

Следует отметить, что набор локально оптимизированных запросов может перестать быть оптимальным при совместном рассмотрении нескольких запросов. Аналогично, оптимальный набор множества запросов не гарантирует оптимальный выбор материализованных представлений, так как другой набор может привести к более эффективным материализованным представлениям. Поэтому важно рассматривать все три задачи, которые являются NP полными, вместе при выборе материализованных представлений. Однако в учебных целях будет **исследоваться только** решение задачи выбора материализованных представлений.

## Локальная оптимизация запроса {#sec-lab-extra-genetic-materialized-view-local-query}

Пусть есть три таблицы со следующей схемой

```{mermaid}
erDiagram
    catergories ||--|{ product : has
    manufacturers ||--|{ product : has
    catergories {
        int id
        text name
    }

    manufacturers {
        int id
        text name
        text country
    }
    product {
        int id
        int category_id
        int manufacturer_id
        text name
    }
```

и запрос на выборку из всех трёх таблиц

``` sql
SELECT * 
FROM product
JOIN catergories ON product.category_id = catergories.id
JOIN manufacturers ON product.manufacturer_id = manufacturers.id
```

В оптимизации запросов одной из самых затратных операций является операция соединения (JOIN). Оптимизация оптимизация запроса здесь будет пониматься как оптимизация порядка соединений

```{r}
#| include: false

g <- igraph::make_empty_graph() |>
  igraph::add_vertices(nv = 3, name = c('prod','man','cat'))

g1 <- igraph::add_vertices(g, nv = 2, name = c('J(prod,cat)','J(J(prod,cat),man)'))|>
  igraph::add_edges(c('prod','J(prod,cat)',
                      'cat','J(prod,cat)',
                      'J(prod,cat)','J(J(prod,cat),man)',
                      'man', 'J(J(prod,cat),man)'))

g2 <- igraph::add_vertices(g, nv = 2, name = c('J(prod,man)','J(J(prod,man),cat)'))|>
  igraph::add_edges(c('prod','J(prod,man)',
                      'man','J(prod,man)',
                      'J(prod,man)','J(J(prod,man),cat)',
                      'cat', 'J(J(prod,man),cat)')) 

```

```{r}
#| echo: false
#| layout-ncol: 2

plot(g1, vertex.label.cex = 2, layout = rbind(c(0,0),c(2,0),c(1,0),c(1,1),c(2,2)), vertex.size = 65)
plot(g2, vertex.label.cex = 2, layout = rbind(c(0,0),c(1,0),c(2,0),c(1,1),c(2,2)), vertex.size = 65)
```

Локальный план обработки определяется как граф запроса, в котором все отношения — это листовые узлы, а все операции (например, соединение, проекция и выборка) — внутренние узлы. Поскольку рассматривается только операция соединения, локальный план обработки для запроса можно представить в виде бинарного дерева соединений, листьями которого являются все отношения, а внутренними узлами — операции соединения. Рёбра в таком дереве маркируются предикатами соединения и селективностью соединения. Предикат соединения сопоставляет кортежи из декартова произведения смежных узлов в значение *false* или *true* в зависимости от того, должен ли кортеж включаться в результат. Селективность соединения — это отношение количества включенных кортежей к общему количеству кортежей.

Стоимости двух деревьев соединения также различаются, хотя структура одинаковая, потому что порядок соединения отношений разный. Левое дерево в имеет вид $((cat \bowtie prod) \bowtie man)$, когда правое дерево -- $((cat \bowtie man) \bowtie prod)$. Предположим, что размеры таблиц $cat$, $man$ и $prod$ равны 20, 30 и 100 соответственно. Стоимость левого дерева рассчитывается следующим образом. Сначала вычисляется стоимость $(cat \bowtie prod)$ как $\|cat\| \cdot \|prod\|=20 \cdot 100=2000$. Если результаты $(cat \bowtie prod)$ содержим 50 кортежей, то стоимость $((cat \bowtie prod) \bowtie man)$ будет $50 \cdot 30=1500$. Итак, общая стоимость: $2000+1500=3500$. Однако, стоимость правого дерева в будет отличаться. Стоимость $(cat \bowtie man)$ равна $\|cat\| \cdot \|man\|=20 \cdot 30=600$. Если результат $(cat \bowtie man)$ содержит 30 кортежей, то стоимость $((cat \bowtie man) \bowtie prod)$ будет равна $30 \cdot 100=3000$, и, следовательно общая стоимость равна $600 + 3000 = 3500$.

Таким образом для определения оптимального локального плана выполнения запроса требуется решить. NP полную задачу. Данная задача далее рассматриваться **не будет** в связи с подходом к построению глобального плана указанного в пункте @sec-lab-extra-genetic-materialized-view-global-plan.

## Глобальная оптимизация нескольких запросов {#sec-lab-extra-genetic-materialized-view-global-query}

Дано множество планов обработки для запроса. Цель оптимизации запроса — найти такой план обработки, который обеспечивает наименьшую стоимость выполнения запроса. Глобальный план выполнения получается путём объединения локальных планов. Таким образом два запроса могут быть объединены по общим узлам. Рассмотрим следующие 3 запроса которые попарно используют 4 таблицы (T1, T2, T3, T4)

``` sql
SELECT * FROM T1 JOIN T2, T3
SELECT * FROM T1 JOIN T2, T4
SELECT * FROM T2 JOIN T3, T4
```

```{r}
#| include: false

g1 <- igraph::make_empty_graph() |>
  igraph::add_vertices(nv = 4, name = c('T1','T2','T3','J(T1,T2,T3)')) |>
  igraph::add_edges(c('T1','J(T1,T2,T3)','T2','J(T1,T2,T3)','T3','J(T1,T2,T3)'))
  
g2 <- igraph::make_empty_graph() |>
  igraph::add_vertices(nv = 4, name = c('T1','T2','T4','J(T1,T2,T4)')) |>
  igraph::add_edges(c('T1','J(T1,T2,T4)','T2','J(T1,T2,T4)','T4','J(T1,T2,T4)'))

g3 <- igraph::make_empty_graph() |>
  igraph::add_vertices(nv = 4, name = c('T2','T3','T4','J(T2,T3,T4)')) |>
  igraph::add_edges(c('T2','J(T2,T3,T4)','T3','J(T2,T3,T4)','T4','J(T2,T3,T4)'))
```

Их локальные планы выполнения

```{r}
#| echo: false
#| layout-ncol: 3

plot(g1, vertex.label.cex = 3.5, layout = rbind(c(0,0),c(1,0),c(2,0),c(1,1)), vertex.size = 80)
plot(g2, vertex.label.cex = 3.5, layout = rbind(c(0,0),c(1,0),c(2,0),c(1,1)), vertex.size = 80)
plot(g3, vertex.label.cex = 3.5, layout = rbind(c(0,0),c(1,0),c(2,0),c(1,1)), vertex.size = 80)
```

При объединении нескольких планов обработки запросов, то есть нескольких деревьев соединений, формируемый глобальный план обработки должен представлять собой ориентированный ациклический граф (DAG), а не дерево. Вершины `Q1`, `Q2` и `Q3` обозначают результирующие таблицы запросов.

```{r}
#| echo: false
#| fig-height: 6

set.seed(23)
igraph::make_empty_graph() |>
  igraph::add_vertices(nv = 11, name = c('Q1','Q2','Q3','T1','T2','T3','T4','J(T1,T2)','J(J(T1,T2),T3)','J(J(T1,T2),T4)', 'J(T1,T3,T4)')) |>
  igraph::add_edges(c('T1', 'J(T1,T2)',
                      'T2', 'J(T1,T2)',
                      'T1', 'J(T1,T3,T4)',
                      'T3', 'J(T1,T3,T4)',
                      'T4', 'J(T1,T3,T4)',
                      'J(T1,T2)', 'J(J(T1,T2),T3)',
                      'T3','J(J(T1,T2),T3)',
                      'J(T1,T2)','J(J(T1,T2),T4)',
                      'T4','J(J(T1,T2),T4)',
                      'J(J(T1,T2),T3)','Q1',
                      'J(J(T1,T2),T4)','Q2',
                      'J(T1,T3,T4)','Q3')) |> 
plot(vertex.label.cex = 1.5, vertex.size = 30)
```

При объединении в один глобальный план возникает несколько вариантов промежуточных объединений, например JOIN(T1,T2) или JOIN(T2,T3). В общем случае объединение локально оптимальных планов не обязательно приводит к глобально оптимальному плану. Следовательно, мы не можем найти глобально оптимальный план, просто объединив локально оптимальные планы. Выбор оптимального глобального плана так-же является NP полной задачей и рассматриваться **не будет** в связи с подходом к построению глобального плана указанного в пункте @sec-lab-extra-genetic-materialized-view-global-plan.

## Выбор материализованных представления {#sec-lab-extra-genetic-materialized-view-selection}

Основная задача -- это выбор представлений для материализации таким образом, чтобы минимизировать стоимость обработки запросов и поддержки представлений для всех узлов в глобальном плане обработки. Простой подход — использовать полный перебор, чтобы найти оптимальный набор материализованных представлений для заданного множества запросов. Однако этот подход становится непрактичным при большом пространстве поиска. Задача выбора материализованных представлений является NP-трудной. Для ускорения получения результата необходимо использовать эволюционные алгоритмы, чтобы сократить пространство поиска @sec-lab-extra-genetic-materialized-view-genetic-alghorithm. Для предварительного сокращения пространства поиска имеет смысл материализовать только **совсместно используемые** промежуточные узлы.

## Модель запроса {#sec-lab-extra-genetic-materialized-view-query-model-plan}

Рассмотрим запрос выборки на языке SQL: "Товары дороже средней цены"

``` sql
SELECT products.name, price_change.price
FROM products
JOIN price_change ON products.id = price_change.product_id
WHERE price_change.price > (SELECT AVG(price_change.price) FROM price_change)
```

из таблиц

```{mermaid}
erDiagram
    products ||--|{ price_change : has
    
    price_change {
        int id
        int product_id
        real price
        date change_date
    }
    products {
        int id
        int category_id
        int manufacturer_id
        text name
        real price
    }
```

Разделим его на подзапрос, вычисляющий среднюю цену `average_price`

``` sql
SELECT AVG(price_change.price)
FROM price_change
```

и главный запрос

``` sql
SELECT products.name, price_change.price
FROM products
JOIN price_change ON products.id = price_change.product_id
WHERE price_change.price > average_price
```

В задаче будет рассматриваться максимально упрощенное подмножество операторов языка SQL. Рассмотрим, как предстваить этот запрос в виде графа вычислений.

```{r}
#| include: false

source('sql.R')
```

С каждым вычислительным узлом связана таблица, эта таблица передаётся в главном аргументе (связь `val`)

### JOIN {#sec-lab-extra-genetic-materialized-view-query-model-plan-join}

Рассмотрим часть запроса

``` sql
FROM products
JOIN price_change ON products.id = price_change.product_id
```

Представленную в yaml

``` yaml
body:
  join:
    - products
    - price_change
```

Операция JOIN выполняется в два этапа, сначала создаётся полное декартово произведение двух таблиц, далее записи фильтруются по условию соединения в операции WHERE @sec-lab-extra-genetic-materialized-view-query-model-plan-where. У операции JOIN аргументы (таблицы) равнозначны, что отличает её от других функций, которые имеют один главный аргумент (`val`), к которому они применяют другие свои аргументы `arg`. Для однотипной обработки введём фиктивный главный аргумент `JOIN EMPTY` --- `JE`.

```{r}
#| include: false

q_join <- list(fun = 'JOIN', val = 'JE', 'products','price_change')
g <- g_join <- init_graph() |>
  add_table('products') |>
  add_table('price_change')
add_query(q_join,'QJ') |> invisible()
gf_join <- g

l_join <- rbind(c(1,0), # JE
                c(0,1), # products
                c(3,1), # price_change
                c(1,3), # JOIN(JE,products, price_change)
                c(1,5)) # QJ
```

```{r}
#| echo: false

plot(gf_join, vertex.label.cex = 1.8, layout = l_join, vertex.size = 35)
```

На текущий момент граф выглядит следующим образом:

```{r}
#| include: false

v_join <- igraph::as_data_frame(gf_join, 'vertices')
e_join <- igraph::as_data_frame(gf_join, 'edges')
table_join <- tibble::tibble(col = c('products.id',
         'products.name',
         'products.category_id',
         'products.manufacturer_id',
         'products.price',
         'price_change.id',
         'price_change.product_id',
         'price_change.price',
         'price_change.change_date'), 
         type = c('INTEGER','TEXT','INTEGER','INTEGER', 'REAL', 'INTEGER','INTEGER','REAL','DATE'))
lines_join <- 100 * 150
```

```{r}
#| echo: false
#| tbl-cap: [Вершины, Рёбра]

knitr::kable(v_join, row.names = FALSE)
knitr::kable(e_join)
```

Соответственно на данный момент результатом операции будет таблица, состоящая из $100 \cdot 150 = 15000$ строк и следующих столбцов

```{r}
#| echo: false

knitr::kable(table_join)
```

::: callout-note
Считается, что у таблицы JoinEmpty (JE) нет столбцов и одна строка.
:::

### WHERE {#sec-lab-extra-genetic-materialized-view-query-model-plan-where}

Добавим к запросу условие отбора, его главынм аргументом `val` будет таблица, полученная на предыдущем шаге в JOIN, а аргументами `arg` имена условий

``` sql
WHERE price_change.new_price > average_price AND
  products.id = price_change.product_id
```

Представленную в yaml

``` yaml
body:
  where:
    - name: products.id = price_change.product_id
      sample: 0.3
    - name: price_change.new_price > average_price
      sample: 0.3
      depends: average_price
```

```{r}
#| include: false

g <- g_where <- add_condition(g_join, 'products.id = price_change.product_id') |>
add_condition('average_price')

q_where <-  list(fun = 'WHERE', 
           val = q_join, 
           'products.id = price_change.product_id', 
           'average_price')

add_query(q_where,'QW') |> invisible()
gf_where <- g
v_where <- igraph::as_data_frame(gf_where, 'vertices')
e_where <- igraph::as_data_frame(gf_where, 'edges')
table_where <- table_join
lines_where <- lines_join * 0.3^2

l_where <- rbind(c(1,0),  # JE
                 c(-1,1), # products
                 c(3,1),  # price_change
                 c(4,3),  # products.id = price_change
                 c(-1,3), # average_price
                 c(1,2),  # JOIN(JE,)
                 c(1,5),  # WHERE(JOIN(JE,))
                 c(1,7))  # QW
```

```{r}
#| echo: false
#| fig-height: 6

plot(gf_where, vertex.label.cex = 1, layout = l_where, vertex.size = 25)
```

Заметим, что условие `price_change.new_price > average_price` зависит от подзапроса `average_price`, поэтому и назовём его так-же для удобства.

В граф были добавлены

```{r}
#| echo: false
#| tbl-cap: [Вершины, Рёбра]

knitr::kable(dplyr::setdiff(v_where,v_join), row.names = FALSE)
knitr::kable(dplyr::setdiff(e_where,e_join))
```

Так как оба условия имеют селективность $0.3$, то общее число строк станет $15000 \cdot {0.3}^2=1350$, а столбцы останутся всё те же.

### SELECT {#sec-lab-extra-genetic-materialized-view-query-model-plan-select}

Главным аргументом запроса `val` будет таблица полученная на предыдущем шаге, а аргументами `arg` будут полные названия столбцов

``` sql
SELECT products.product_name, price_change.new_price
```

Представленную в yaml

``` yaml
body:
  select:
    - products.product_name
    - price_change.new_price
```

```{r}
#| include: false

g <- g_select <- add_column(g_where, 'products.name') |> 
  add_column('price_change.price')

q_select <- list(fun='SELECT', val = q_where, 'products.name', 'price_change.price')
add_query(q_select,'QS') |> invisible()
gf_select <- g
v_select <- igraph::as_data_frame(gf_select, 'vertices')
e_select <- igraph::as_data_frame(gf_select, 'edges')
lines_select <- lines_where
table_select <- dplyr::filter(table_where, col %in% c('products.name', 'price_change.price'))

l_select <- rbind(c(1,0),  # JE
                  c(-1,1), # products
                  c(3,1),  # price_change
                  c(4,3),  # products.id
                  c(-1,3), # average_price 
                  c(-1,6), # products.name
                  c(4,6),  # price_change.price
                  c(1,3),  # JOIN
                  c(1,5),  # WHERE
                  c(1,7),  # SELECT
                  c(1,9))  # QS
```

```{r}
#| echo: false
#| fig-height: 7

plot(gf_select, layout = l_select, vertex.size = 30)
```

В граф были добавлены

```{r}
#| echo: false
#| tbl-cap: [Вершины, Рёбра]

knitr::kable(dplyr::setdiff(v_select,v_where), row.names = FALSE)
knitr::kable(dplyr::setdiff(e_select,e_where))
```

В этом случае в таблице останутся только два столбца

```{r}
#| echo: false

knitr::kable(table_select)
```

### AGGREGATE {#sec-lab-extra-genetic-materialized-view-query-model-plan-aggregate}

Возможны следующие функции агрегации

-   IDENTITY
-   COUNT
-   SUM
-   MAX
-   AVG
-   MIN
-   DISTINCT

Оператор IDENTITY введён для обобщенной обработки и не изменяет текущий столбец. Продемонстрируем применение функции агрегации на подзапросе.

``` sql
SELECT AVG(price_change.price_change)
FROM price_change
```

``` yaml
subqueries:
    body:
      from: price_change
      select:
        - price_change.new_price
      aggregate:
        - AVG
```

```{r}
#| include: false

g <- igraph::make_empty_graph() |> 
  add_table('price_change') |>
  add_column('price_change.price') |>
  add_aggregate('AVG') |>
  add_condition('average_price')

sq <- list(fun = 'AGGREGATE', 
           val = list(fun = 'SELECT', 
                      val = 'price_change', 
                      'price_change.price'),
           'AVG')

add_subquery(sq, 'average_price') |> invisible()
v_aggregate <- igraph::as_data_frame(g, 'vertices')
e_aggregate <- igraph::as_data_frame(g, 'edges')

l_aggregate <- rbind(c(0,0), # price_change
                     c(1,1), # price_change.price
                     c(1,3), # AVG
                     c(0,6), # average_price
                     c(0,2), # SELECT  
                     c(0,4)) # AGGREGATE
```

```{r}
#| echo: false
#| fig-height: 6

plot(g, vertex.label.cex = 1.5, layout = l_aggregate)
```

### Полный граф вычислений {#sec-lab-extra-genetic-materialized-view-query-model-plan-full}

Объединив главный запрос и подзапрос получаем следующий граф вычислений. Узел обозначающий запрос определяется по имени из yaml файла

``` yaml
queries:
    name: products_above_avg_price
```

```{r}
#| include: false

igraph::V(gf_select)[name == 'QS']$name <- 'products_above_avg_price'
g <- add_aggregate(gf_select, 'AVG')
add_subquery(sq, 'average_price') |> invisible()
l_full <- rbind(c(1,-2),  # JE
                c(-1,-1), # products
                c(3,-1),  # price_change
                c(-1,3),  # products.id = price_change.product_id
                c(4,3),   # average_price
                c(-1,5),  # products.name
                c(7,5),   # price_change.price
                c(1,0),   # JOIN(JE,products, price_change)
                c(1,4),   # WHERE()
                c(1,6),   # SELECT(WHERE)
                c(1,8),   # QS
                c(3,1.2), # AVG
                c(5,0.5), # SELECT(price_change, price_change.price)
                c(5,2))   # AGGREGATE
```

```{r}
#| echo: false
#| fig-height: 8

plot(g, layout = l_full)
```

### Представление в yaml {#sec-lab-extra-genetic-materialized-view-query-model-plan-yaml}

Структура таблиц определена в файле `database.yaml`

``` yaml
- name: products
  lines: 100
  freq: 8
  columns:
    - name: id
      type: INTEGER
    - name: name
      type: TEXT
    - name: category_id
      type: INTEGER
    - name: manufacturer_id
      type: INTEGER
    - name: price
      type: REAL
- name: price_change
  lines: 150
  freq: 5
  columns:
    - name: id
      type: INTEGER
    - name: product_id
      type: INTEGER
    - name: price
      type: REAL
    - name: change_date
      type: DATE
```

А рассмотренный запрос сохраняется в виде yaml в файлу `queries.yaml`

``` yaml
queries:
  - desc: Товары дороже средней цены
    name: products_above_avg_price
    freq: 9
    body:
      join:
        - products
        - price_change
      where:
        - name: products.id = price_change.product_id
          sample: 0.4
        - name: price_change.price > average_price
          sample: 0.3
          depends: average_price
      select:
        - products.name
        - price_change.price

subqueries:
  - desc: Вычисление средней цены
    name: average_price
    body:
      from: price_change
      select:
        - price_change.price
      aggregate:
        - AVG
```

:::: {.content-visible when-format="html"}
::: {.callout appearance="minimal"}
⤓ [database.yaml](database.yaml)

⤓ [queries.yaml](queries.yaml)
:::
::::

:::: {.content-visible unless-format="html"}
::: {.callout appearance="minimal"}
`\faFile*[regular].`{=latex} [shadow.csv](lab/extra/genetic/database.yaml)

`\faFile*[regular].`{=latex} [shadow.csv](lab/extra/genetic/queries.yaml)
:::
::::

## Стоимость обслуживания {#sec-lab-extra-genetic-materialized-view-maintain-cost}

Каждый промежуточных узел характеризуется стоимость обслуживания, которая складывается из стоимости хранения $\mathrm{store}$ и стоимости обновления $\mathrm{maint}$

$$
\mathrm{main} = \mathrm{store} \cdot \mathrm{maint} 
$$

```{r}
#| echo: false

datatypes <- tibble::tibble(type = c('INTEGER','REAL','DATE','TEXT'),
                            size = c(4,8,4,100))
knitr::kable(datatypes)
```

Стоимость хранения зависит от размера таблицы

$$
\mathrm{store} = n \cdot \sum s_{col,i}
$$

где $n$ число строк в промежуточной таблице, $s_{col,i}$ -- размер типа данных $i$-того столбца.

Для промежуточных узлов вычислений, рассмотренных выше, стоимость приведена в таблице

```{r}
#| echo: false

tbls <- list(table_join, table_where, table_select)
lns <- list(lines_join, lines_where, lines_select)
tibble::tibble(
  fun = c('JOIN', 'WHERE', 'SELECT'),
  num_col = purrr::map_int(tbls, nrow),
  size = purrr::map2_int(tbls, lns, \(tbl, lines) sum(
    dplyr::inner_join(tbl, datatypes, by = 'type')$size
  ) * lines)
) |> knitr::kable()
```

Стоимость обновления зависит от частоты запросов к базовым таблицам материализованного представления

$$
\mathrm{upd} = \mathrm{size} \cdot \sum f_{u,i}
$$

где $f_i$ -- частота запросов $i$-той базовой таблице этого представления. Частота запросов $f_u$ выражается параметром `freq` файла `database.yaml`.

## Стоимость вычисления запроса {#sec-lab-extra-genetic-materialized-view-query-cost}

Все узлы имеют свою стоимость вычисления $\mathrm{comp}$. Если узел является листом (таблица, независимое условие, столбец), то стоимость его вычисления равна нулю. Стоимость вычисления запроса определяется стоимостью вычисления его узлов **поиском в глубину**. Для сокращения вычислительных затрат в качестве кандидатов на материализацию будут рассматриваться только совместно используемые промежуточные узлы. Если узел выбран как материализованный, то стоимость его вычисления учитывается **только один раз** в общей стоимости вычисления всех запросов.

Итоговая стоимость вычисления запроса также зависит от его частоты $f_{q}$, которая приведена в файле `queries.yaml` параметром `freq`

Стоимости вычисления функциональных узлов приведены ниже. За $n$ будем принимать число строк в итоговой таблице данного узла.

### JOIN {#sec-lab-extra-genetic-materialized-view-query-cost-join}

Для JOIN применяется алгоритм хеш-соединения, поэтому стоимость операции оценивается как

$$
n \log{n}
$$

### WHERE {#sec-lab-extra-genetic-materialized-view-query-cost-where}

Условие применяется последовательно к каждой строке для отбора, поэтому стоимость вычисления пропорциональна количеству условий $k$ и числу строк $n$

$$
n \cdot k
$$

Аргументы операции WHERE могут зависеть от подзапросов, поэтому к стоимости вычисления добавляется ещё и стоимость вычисления подзапросов.

### SELECT {#sec-lab-extra-genetic-materialized-view-query-cost-select}

Операция SELECT имеет стоимость $\log{n}$ от числа строк $n$.

### AGGREGATE {#sec-lab-extra-genetic-materialized-view-query-cost-aggregate}

В примере рассматриваются следующие функции агрегации

| Функция  | Стоимость   |
|----------|-------------|
| IDENTITY | $0$         |
| COUNT    | $1$         |
| SUM      | $n$         |
| MAX      | $n$         |
| AVG      | $n$         |
| MIN      | $n$         |
| DISTINCT | $n \log{n}$ |

::: callout-tip
Библиотека `igraph` предоставляет гибкие и эффективные функции выбора подграфов, листьев и вершин по условию @sec-lab-extra-genetic-materialized-view-igraph-query.
:::

## Целевая функция {#sec-lab-extra-genetic-materialized-view-objective}

Теперь мы можем рассчитать затраты для различных стратегий материализации представлений. Предположим, что некоторые промежуточные узлы материализованы. Для каждого запроса стоимость обработки равна произведению частоты выполнения запроса на стоимость доступа к запросу от материализованного узла (или узлов). Стоимость поддержки материализованного представления -- это стоимость его построения (в данном случае предполагается, что при каждом обновлении задействованных базовых отношений представление полностью пересчитывается). Общая стоимость -- это сумма всех затрат на выполнение запросов и затрат на поддержку представлений. Цель -- найти такой набор узлов для материализации, при котором общая стоимость минимальна.

Пусть $М$ – набор материализованных представлений, $C_{q_i}(M)$ – стоимость вычислений $q_i$ из набора материализованных представлений $M$, а $C_m(V)$ – стоимость обслуживания при материализации $v$. Тогда общая стоимость обработки запроса $\sum_{q_i\in Q} f_{q_i} C_{q_i}(M)$, а общая стоимость обслуживания $\sum_{v \in M} C_m(v)$. Общая стоимость материализованных представлений $M$ определяется формулой:

$$
\sum_{q_i \in Q} C_{q_i} f_{q_i}(M)  + \sum_{v \in M} f_u C_m(v)
$$

Для заданного глобального плана обработки минимизировать указанную общую стоимость.

## Построение глобального плана запросов {#sec-lab-extra-genetic-materialized-view-global-plan}

Глобальный план запросов строился из следующих предположений:

-   Все узлы, которые имеют одинаковый главный аргумент `val` и пересекающиеся аргументы `args`
-   Сначала создаются (обрабатываются) узлы, имеющие наибольшее количество общих аргументов
-   Затем узлы, которые имеют меньше общих аргументов, но больше улов используют эти аргументы совместно
-   Процесс повторяется до тех пор, пока таких узлов не останется

В итоге получается один из возможных глобальных планов

```{r}
#| echo: false
g <- igraph::read_graph('plan.graphml', format = 'graphml')
base_color <- tibble::tibble(fun = c('table','condition','column','aggregate','query'),
color = c('blue','green','magenta','orange','yellow'))
g
```

Для наглядной визуализации определим цвета базовых узлов

```{r}
#| echo: false

knitr::kable(base_color)
```

и отобразим на графе

```{r}
#| echo: false
#| fig-height: 8

igraph::V(g)$color <- tibble::tibble(fun = igraph::V(g)$fun) |>  
  dplyr::left_join(base_color, by = 'fun') |>
  (\(df) df$color)()
set.seed(24)
plot(g, vertex.label = NA, edge.label = NA, vertex.size=5, edge.arrow.size = 0.6)
```

Красным отмечены промежуточные совместно используемые узлы

```{r}
#| echo: false
#| fig-height: 8

igraph::V(g)$color <- NA
igraph::V(g)[fun %in% SQL_FUN & igraph::degree(g, mode='out') >= 2]$color <- 'red'
set.seed(24)
plot(g, vertex.label = NA, edge.label = NA, vertex.size=5, edge.arrow.size = 0.6)
```

Граф определяется в следующих файлах

:::: {.content-visible when-format="html"}
::: {.callout appearance="minimal"}
⤓ [plan.graphml](plan.graphml)

⤓ [vertex.csv](vertex.csv)

⤓ [edges.csv](edges.csv)
:::
::::

:::: {.content-visible unless-format="html"}
::: {.callout appearance="minimal"}
`\faFile*[regular].`{=latex} [plan.graphml](lab/extra/genetic/plan.graphml)

`\faFile*[regular].`{=latex} [shadow.csv](lab/extra/genetic/vertex.csv)

`\faFile*[regular].`{=latex} [shadow.csv](lab/extra/genetic/edges.csv)
:::
::::

## Решение генетическим алгоритмом {#sec-lab-extra-genetic-materialized-view-genetic-alghorithm}

Таким образом получается, что целевая функция зависит от набора материализуемых представлений (промежуточных узлов). Её структуру можно представить с помощью битовой строки, где позиции (индекс) это номер представления, а значение -- решение о его материализации.

<https://loginom.ru/blog/ga-math>

::: callout-tip
Задача оптимизации битовых строк является широко распространённой. Рекомендуется использовать готовый пакет, например `{r} GA::ga() |> dl()`.
:::

## Запросы к графу {#sec-lab-extra-genetic-materialized-view-igraph-query}

### Выбор поддерева

`{r} igraph::unfold_tree() |> dl()` и `{r} igraph::subgraph() |> dl()`.

### Выбор вершин

Индексация [`igraph::V(g)[]`](https://igraph.org/r/html/latest/igraph-vs-indexing.html) позволяет использовать атрибуты вершин в запросе

```{{r}}
igraph::V(g)[fun == 'JOIN']
```

Также этот запрос можно комбинировать с логическим вектором

```{{r}}
igraph::V(g)[fun == 'JOIN' & igraph::degree(g, mode = 'out')]
```

### Степень вершины

Чтобы определить количество входящих и выходящих рёбер из вершины полезна функция `{r} igraph::degree() |> dl()`.

### Выбор рёбер

[`igraph::E(g)[]`](https://igraph.org/r/html/latest/igraph-es-indexing.html) полезными будут аргументы `to` и `from`

```{{r}}
E(g)[.to(),from()]
```

### Получение вершин смежных ребру

`{r} igraph::tail_of() |> dl()` и `{r} igraph::head_of() |> dl()`
