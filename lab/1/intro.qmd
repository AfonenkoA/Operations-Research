```{r}
#| label: import
#| echo: false
#| warning: false
#| message: false
#| include: false 

source('../../util/doc_link.R')
source('../../util/plotly_show.R')
```

# 1. Введение {#sec-lab-1}

::: {.callout-caution title="Состояние разработки"}
Требуется доработка
:::

## Инструкции {#sec-lab-1-instructions}

### Установка

1.  Установить R @sec-enviroment-setup-r
2.  Установить RTools @sec-enviroment-setup-rtools
3.  Установить IDE для работы: RStudio @sec-enviroment-setup-rstudio или другу IDE, которую поддерживает [Quarto](https://quarto.org/docs/get-started/).
4.  Создать интерактивный блокнот Quarto @sec-enviroment-rstudio-quarto-new и сохранить его в отдельном каталоге (например `lab1` ).
5.  Изучить возможности визуального редактора RStudio IDE @sec-enviroment-rstudio-quarto-visual-editor
6.  Скопировать код из примера @sec-enviroment-quarto-example-install, вставить в редакторе @sec-enviroment-rstudio-quarto-source-editor и запустить рендер (@sec-enviroment-rstudio-shortcuts-rendering или @sec-enviroment-quarto-preview).
7.  Скопировать в рабочий каталог файлы [окружения renv](https://github.com/AfonenkoA/Operations-Research/tree/renv) и восстановить пакеты @sec-r-tools-renv-project-restore
8.  Отрендерить пример @sec-enviroment-quarto-preview или @sec-enviroment-rstudio-shortcuts-rendering

### Теория

1.  Изучить язык разметки `Quarto Markdown` @sec-markdown и `LaTeX` @sec-latex
2.  Изучить основы языка `R` @sec-r-lang-basic
3.  Изучить библиотеку для построения графиков `plotly` @sec-r-tools-plotly или `ggplot` @sec-r-tools-ggplo2
4.  Повторить отдельные элементы из линейной алгебры @sec-linear-algebra
5.  Повторить теорию определения экстремумов функций @sec-nonlinear-unconstrained-one и @sec-nonlinear-unconstrained-many

::: {#exm-lab-1}
Чтобы попасть из пункта А (остановка автобуса) в пункт В (лодочная станция) человек должен пройти сначала по асфальтовой дороге шириной $S$, а затем по песчаному пляжу шириной $s$. Скорость передвижения по асфальту $V$ , скорость передвижения по песку $v$. Спрашивается, в каком месте нужно свернуть с асфальтовой дороги, чтобы затратить меньше времени на путь.
:::

::: {#sol-lab-1}
Решим задачу с конкретными значениями, в виду сложности аналитического решения (сводится к уравнению 4 степени): $D = 100$, $S = 40$, $V = 5$, $s = 60$, $v = 3$

```{r}
#| include: false

D <- 100
h_road <- 40 #S
h_sand <- 60 #s
v_sand <- 3 #v
v_road <- 5 #V
```

```{r}
#| echo: false
#| message: false
#| warning: false

library(plotly)

aval <- list()
n <- 51

x_par <- seq(1, D - 1, length.out = n)

for (step in 1:n)
{
  road_x <- seq(0, x_par[step], length.out = 100)
  road_y <- h_road / x_par[step] * road_x
  sand_x <- seq(x_par[step], D, length.out = 100)
  sand_y <- h_road + h_sand / (D - x_par[step]) * (sand_x - x_par[step])
  t <-  sqrt(step^2 + h_road^2) / v_road + sqrt((D - step)^2 + h_sand^2) /
    v_sand
  
  
  aval[[step]] <- list(
    visible = FALSE,
    name = paste0('t = ', format(round(t, 2), nsmall = 2)),
    road_x = road_x,
    road_y = road_y,
    sand_x = sand_x,
    sand_y = sand_y
  )
}

aval[3][[1]]$visible = TRUE

# create steps and plot all traces
steps <- list()
fig <- plot_ly()
for (i in 1:n) {
  fig <- fig |> add_lines(
    x = aval[[i]]$road_x,
    y = aval[[i]]$road_y,
    visible = aval[[i]]$visible,
    name = aval[[i]]$name,
    type = 'scatter',
    mode = 'lines',
    line = list(color = '00CED1'),
    showlegend = TRUE
  )
  
  fig <- fig |> add_lines(
    x = aval[[i]]$sand_x,
    y = aval[[i]]$sand_y,
    visible = aval[[i]]$visible,
    name = aval[[i]]$name,
    type = 'scatter',
    mode = 'lines',
    line = list(color = "red"),
    showlegend = FALSE
  )
  
  step <- list(
    args = list('visible', rep(FALSE, 2 * n)),
    method = 'restyle',
    label = paste0(x_par[i])
  )
  step$args[[2]][2 * i] = step$args[[2]][2 * i - 1] = TRUE
  steps[[i]] = step
}


fig |>
  layout(
    yaxis = list(range = c(-1, D + 1)),
    xaxis = list(range = c(-1, D + 1)),
    sliders = list(list(
      active = round(n/2),
      currentvalue = list(prefix = "x = "),
      steps = steps
    )),
    shapes = list(
      list(
        type = "rect",
        fillcolor = "red",
        line = list(color = "red"),
        opacity = 0.2,
        y0 = 0,
        y1 = h_road,
        x0 = 0,
        x1 = D
      ),
      list(
        type = "rect",
        fillcolor = "blue",
        line = list(color = "blue"),
        opacity = 0.2,
        y0 = h_road,
        y1 = D,
        x0 = 0,
        x1 = D
      )
    ),
    c
  ) |>
  pshow()

```

Критерий оптимальности задается функцией $t(x)$, которую надо минимизировать, изменяя варьируемый параметр $х$. Остальные параметры задачи $(v,V,D,s,S)$ являются фиксированными. $$t(x) = \frac{\sqrt{x^2+S^2}}{V} + \frac{\sqrt{(D-x)^2+s^2}}{v}$$ $$\begin{cases}
      \min{t(x)} - ?\\
      \frac{dt}{dx}=0\\
      \frac{d^2t}{dx^2}>0
\end{cases}\,$$ $$t'(x)=\frac{x}{V \sqrt{S^2+x^2}}-\frac{d-x}{v \sqrt{(d-x)^2+s^2}}$$

График целевой функции $t(x)$

```{r}
#| message: false
#| warning: false
#| echo: false

x <- seq(0, D, length.out=100)
y <- sqrt(x^2+h_road^2)/v_road + sqrt((D-x)^2+h_sand^2)/v_sand
plot_ly(x=x, y=y, type = 'scatter', mode = 'lines') |> pshow()
```

График производной целевой функции $t'(x)$

```{r}
#| message: false
#| warning: false
#| echo: false

x <- seq(0, D, length.out=100)
y <- x/(v_road*sqrt(h_road^2+x^2)) - (D-x)/(v_sand*sqrt(h_sand^2+(D-x)^2))
plot_ly(x= x, y=y, type = 'scatter', mode = 'lines') |> pshow()

```

Следовательно оптимальное значение пути, пройденного по дороге $x = 65.64$
:::

## Задания {#sec-lab-1-task}

### Отчёт

Создать документ `Quarto` в RStudio @sec-enviroment-rstudio-quarto-new или через командную строку @sec-enviroment-quarto. Отчёт загружается на образовательный портал.

### Язык программирования R {#sec-lab-1-task-r-programming}

:::: {#exr-lab-1-r-lang-vector-seq}
Упростите выражение (@sec-r-lang-basic-vector-sequence):

``` r
c(sqrt(1), sqrt(2), sqrt(3))
```

Создайте последовательность 2 способами `(-1, -0.75, -0.5, …, 0.75, 1)`.

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-r-lang-plot2d}
Построить график (@sec-r-tools-plotly-line2d) кусочно-гладкой функции (@sec-r-lang-basic-function-defenition) используя функцию `{r} ifelse() |> dl()`

$$
f(x)=\begin{cases}
      x^2,\qquad x \leq -3\\
      x^3, \qquad -3 < x < 3\\
      2x+1, 3\leq x
\end{cases}\,
$$

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-r-lang-sum-vectorization}
С помощью [ряда Лейбница](https://ru.wikipedia.org/wiki/%D0%A0%D1%8F%D0%B4_%D0%9B%D0%B5%D0%B9%D0%B1%D0%BD%D0%B8%D1%86%D0%B0) можно получить значение числа $\pi$ . Данный ряд сходится очень медленно.

$$
\pi = 4 \sum_{i=0}^n{\frac{(-1)^i}{2i+1}}
$$

Использовав по максимуму *векторные операции* (@sec-r-lang-basic-vectorization) рассчитайте для различных $n$ от $n=10$ до $n=10^{8}$

1.  число $\pi$ и его ошибку
2.  постройте график (@sec-r-tools-plotly-line2d) ошибки от $n$

::: {.callout-note appearance="minimal"}
Уровень 2
:::
::::

:::: {#exr-lab-1-r-lang-list-indexing}
Создать список (@sec-r-lang-basic-list) содержащий буквы от '`a'` до '`z'`. Продемонстрировать использование операторов индексации (@sec-r-lang-basic-list-indexing).

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-r-lang-matrix}
Создать список (@sec-r-lang-basic-list) матриц (@sec-r-lang-basic-matrix) размером `2x2` заполненных случайными целыми числами. Используя циклы (@sec-r-lang-basic-cylce) получите:

1.  список с элементов `(2,2)` каждой матрицы (@sec-r-lang-basic-list-indexing , @sec-r-lang-basic-matrix-indexing).
2.  вектор состоящий из элементов `(1,1)`, `(1,2)` этих матриц.

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-r-lang-array}
1.  создайте пятимерный массив и заполните его целыми числами.
2.  преобразуйте его как список массивов размерности 4.
3.  преобразуйте его как список списков массивов размерности 3.

::: {.callout-note appearance="minimal"}
Уровень 2
:::
::::

### Линейная алгебра {#sec-lab-1-task-linear-algebra}

:::: {#exr-lab-1-linear-algebra-equation-solve-integrated}
Решить СЛАУ (@sec-linear-algebra-equation-system) $AX=b$ встроенным методом (@sec-r-tools-basic-solve). Элементы матриц сгенерировать произвольно. `{r} solve() |> dl()`

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-linear-algebra-formula-check}
Для произвольных матриц $A$ и $B$ заполненных случайными числами проверить следующие свойства:

1.  $(A+B)^T=A^T+B^T$ @sec-linear-algebra-matrix-operations-transpose
2.  $(AB)^T=B^TA^T$
3.  $\det{A}=\det{A^T}$ @sec-linear-algebra-matrix-determinant
4.  $\det{AB}=\det{A}\det{B}$
5.  $\det{A^{-1}}=(\det{A})^{-1}$
6.  $(AB)^{-1}=B^{-1}A^{-1}$ @sec-linear-algebra-matrix-inverse
7.  $(A-B)^{-1}=A^{-1}+A^{-1}B(A-B)^{-1}$

Рассмотрите функции `{r} inverse() |> dl()` @sec-r-tools-basic-inverse, `{r} det() |> dl()` @sec-r-tools-basic-det

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-linear-algebra-equation-solve-custom-gauss}
Реализовать решение системы линейных уравнений методом гаусса @sec-linear-algebra-equation-system-many-variables-algorithm-gauss используя векторные операции.

::: {.callout-note appearance="minimal"}
Уровень 3
:::
::::

### Исследование операций {#sec-lab-1-task-operations-research}

:::: {#exr-lab-1-operations-research-graphical-solution}
1.  Построить объемный (@sec-r-tools-plotly-surface3d) и контурный (@sec-r-tools-plotly-contour2d) графики функций $z = x^2 - y^2$ и $z = x^2 + y^2$.
2.  Графически определить минимум.
3.  К какому типу относятся кривые, изображенные на контурном графике.

::: {.callout-note appearance="minimal"}
Уровень 1
:::
::::

:::: {#exr-lab-1-operations-research-moving-body}
Найти максимальную скорость тела движущегося по закону

$$
s = 18t + 9t^2 - t^3
$$

1.  Построить график функции и её производной (@exm-r-tools-plotly-line2d-combine).
2.  Аналитически определить максимум функции (@sec-nonlinear-unconstrained-one).
3.  Доказать, что данная точка является максимумом (@thm-nonlinear-unconstrained-one-sufficiency-1) или (@thm-nonlinear-unconstrained-one-sufficiency-2) .

::: {.callout-note appearance="minimal"}
Уровень 2
:::
::::

:::: {#exr-lab-1-operations-research-ship}
Суточные расходы при плавании судна состоят из двух частей: постоянной, равной $а$, и переменной, возрастающий пропорционально кубу скорости. При какой скорости $v$ плавание судна окажется наиболее экономичным?

1.  определите целевую функцию
2.  аналитически определите максимум целевой функции (@sec-nonlinear-unconstrained-one)
3.  постройте график целевой функции (@sec-r-tools-plotly-line2d)

::: {.callout-note appearance="minimal"}
Уровень 2
:::
::::

:::: {#exr-lab-1-operations-research-box}
Имеется квадратный лист жести, сторона которого $а=60\ см$. Вырезая по всем его углам равные квадраты и загибая оставшуюся часть, нужно изготовить коробку без крышки. Каковы должны быть размеры вырезаемых квадратов, чтобы коробка имела наибольший объем?

![Раскройка листа жести](box.png)

1.  определите целевую функцию
2.  аналитически определите максимум целевой функции (@sec-nonlinear-unconstrained-one)
3.  постройте график целевой функции (@sec-r-tools-plotly-line2d)

::: {.callout-note appearance="minimal"}
Уровень 3
:::
::::

### Прикладная магия {#sec-lab-1-task-magic}

:::: {#exr-lab-1-magic}
Пусть дана функция общего вида $f(x,y)$ и система уравнений $Ax=b$ для двух переменных. Постройте контурный график функции, на котором изобразите точки пересечения прямых. Обработать случаи параллельных прямых, совпадающих прямых @sec-linear-algebra-equation-system-two-variables.

::: {.callout-note appearance="minimal"}
Уровень 4
:::

Дополнительно попробуйте использовать встроенный интерфейса формулы используя переменно число аргументов для функции. Считайте символ `~` эквивалентом символу `=`. @sec-r-lang-advanced-formula

```{{r}}
f(2*x+3*y~0, 2*x~3y+1~0)
```
::::

## Разбалловка {#sec-lab-1-scoring}

| Объём работы                | Итоговый балл |
|-----------------------------|---------------|
| Хорошо отдохнул(-а)         | Не сдано      |
| Все задачи уровня 1         | 2             |
| Все задачи уровней 1 и 2    | 3             |
| Все задачи уровней 1, 2 и 3 | 4             |
| Все задачи уровней 2, 3 и 4 | 5             |

: Разбалловка {tbl-lab-1-scoring}

## Проверочная работа
