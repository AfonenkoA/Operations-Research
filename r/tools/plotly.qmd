# Графическая библиотека plotly {#sec-r-tools-plotly}

Названия графиков рекомендуется добавлять с помощью (@sec-markdown-codeblocks-fig-captions).

## Установка {#sec-r-tools-plotly-install}

```{{r}}
install.packages('plotly')
```

::: callout-tip
Если график строится успешно, то рекомендуется игнорировать сообщения и предупреждения с помощью `message` и `warning` см @sec-markdown-codeblocks-options

```{{r}}
#| warning: false
#| message: false
```
:::

::: callout-important
Для отображения графика во всех примерах требуется удалить последнее применение функции `|> pshow()`. Например @exm-r-tools-plotly-line2d-explicit

```{{r}}
#| warning: false
#| message: false

library(plotly)
x <- seq(0, 2*pi, length.out=100)
y <- sin(x)           
plot_ly(x = x, y = y,
        type = 'scatter',
        mode = 'lines') |>
        pshow()
```

Должно стать

```{{r}}
#| warning: false
#| message: false

library(plotly)
x <- seq(0, 2*pi, length.out=100)
y <- sin(x)           
plot_ly(x = x, y = y,
        type = 'scatter',
        mode = 'lines')
```
:::

## 2D График {#sec-r-tools-plotly-line2d}

::: {#exm-r-tools-plotly-line2d-explicit}
### Явные вычисления

```{r}
#| warning: false
#| message: false


library(plotly)
x <- seq(0, 2*pi, length.out=100) # <1>
y <- sin(x)                       # <2>
plot_ly(x = x, y = y,             # <3>
        type = 'scatter',         # <4>
        mode = 'lines') |>        # <5>
  pshow()          
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $2\pi$.
2.  Получаем вектор `y` применяя функцию `{r} sin() |> dl()` к вектору `x` @sec-r-lang-basic-vectorization
3.  Вызываем функцию `{r} plotly::plot_ly() |> dl()` определяя и передаем данные явным образом @sec-r-lang-basic-function-call-with-args
4.  Параметр `type = 'scatter'` определяет тип графика: по точкам.
5.  Параметр `mode = 'lines'` определяет тип отображения непрерывной линией
:::

::: {#exm-r-tools-plotly-line2d-implicit}
### Неявные вычисления через объект формулы

Предыдущий пример можно упростить использовав специфичную для языка r синтаксическую конструкцию объекта формулы @sec-r-lang-advanced-formula . Такой подход применяется если зависимость $y=f(x)$ простая и встречается в коде только один раз.

```{r}
#| warning: false
#| message: false


library(plotly)
x <- seq(0, 2*pi, length.out=100)            # <1>
plot_ly(x = x,                               # <2>
        y = ~sin(x),                         # <3>
        type = 'scatter', mode = 'lines') |> # <4>
  pshow()                                  
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $2\pi$
2.  Первый аргумент `x` передаём явным образом.
3.  Вместо явного задания вектора `y` передаём в аргумент формулу `~sin(x)`.
4.  Определяем параметры отображения
:::

::: {#exm-r-tools-plotly-line2d-add-markers}
### Добавить маркеры

```{r}
#| warning: false
#| message: false


library(plotly)
x <- seq(0, 2*pi, length.out=10)     # <1>
plot_ly(x = x, y = ~sin(x),          # <2>
        type = 'scatter',            # <3>
        mode = 'lines + markers') |> # <4>
  pshow()
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 10 точек от $0$ до $2\pi$
2.  Передаём данные
3.  Используя тип графика по точкам
4.  Для отображения маркеров используется параметр `mode = lines + markers`.
:::

::: {#exm-r-tools-plotly-line2d-combine}
### Объединить графики

```{r}
#| warning: false
#| message: false


library(plotly)
x <- seq(0, 2*pi, length.out=100)                                    # <1>
plot_ly(x = x, y = ~sin(x), type = 'scatter', mode = 'lines',        # <2>
        name = 'sin(x)') |>                                          # <3>
  add_trace(x = x, y = ~cos(x), type = 'scatter', mode = 'lines',    # <4> 
            name = 'cos') |>                                         # <5>
  pshow()                                                
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $2\pi$
2.  Передаём данные как в примерах выше
3.  Название перовй линии определяется параметром `name = 'sin(x)'`. Полученная фигура передаётся в функцию `{r} plotly::add_trace() |> dl()` с помощью оператора конвейера @sec-r-tools-basic-pipe.
4.  Параметры `{r} plotly::add_trace() |> dl()` аналогичны параметрам [`plot_ly()`](https://rdrr.io/cran/plotly/man/plot_ly.html).
5.  Название второй линии определяется параметром `name = 'cos(x)'`.
:::

## 3D Поверхность {#sec-r-tools-plotly-surface3d}

Один из способ построить 3D график это сгенерировать сетку точек в виде матрицы значений $z=f(x,y)$.

::: {#exm-r-tools-plotly-surface3d-axis-no-scale}
### Без масштаба осей

Общий вид графика сохраняется, однако вместо значений по осям `x` и `y` будет отложено количество точек, использованное для построения.

```{r}
#| warning: false
#| message: false


x <- y <- seq(0, pi/2, length.out = 100) # <1>
z <- outer(x, y,                         # <2>
           \(x,y) { sin(x*y) })  |>      # <3>
  t()                                    # <4>  

plot_ly(z = z,                           # <5>
        type = "surface") |>             # <6>
  pshow() 
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $\frac{\pi}{2}$.
2.  С помощью функции `outer` @sec-r-tools-basic-outer генерируем матрицу @sec-r-lang-basic-matrix размером `100x100`
3.  Для каждой комбинации `x,y` будет вызвана переданная лямбда функция @sec-r-lang-advanced-lambda . Матрица передаётся с помощью оператора конвейера @sec-r-tools-basic-pipe в функцию транспонирования `{r} t() |> dl()`.
4.  Матрица транспонируется `{r} t() |> dl()` для соответствия осей матрицы осям графика.
5.  Передаём для построения только `z`.
6.  Используется тип графика поверхность.
:::

::: {#exm-r-tools-plotly-surface3d-axis-scale}
### С масштабом осей

```{r}
#| warning: false
#| message: false


x <- y <- seq(0, pi/2, length.out = 100) # <1>
z <- outer(x, y,                         # <2>
           \(x,y) { sin(x*y) })  |>      # <3>
  t()                                    # <4>  

plot_ly(z = z, x = x, y = y,             # <5>
        type = "surface") |>             # <6>
  pshow()                                
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $\frac{\pi}{2}$.
2.  С помощью функции `outer` @sec-r-tools-basic-outer генерируем матрицу @sec-r-lang-basic-matrix размером `100x100`
3.  Для каждой комбинации `x,y` будет вызвана переданная лямбда функция @sec-r-lang-advanced-lambda . Матрица передаётся с помощью оператора конвейера @sec-r-tools-basic-pipe в функцию транспонирования `{r} t() |> dl()`.
4.  Матрица транспонируется `{r} t() |> dl()` для соответствия осей матрицы осям графика.
5.  Передаём данные для построения, кроме `z` ещё и `x` с `y`.
6.  Используется тип графика поверхность.
:::

## 2D Контурный график {#sec-r-tools-plotly-contour2d}

Контурные графики позволяют изображать 3D-данные на 2D-графиках. Каждый контур представляет одно значение `z`.

::: {#exm-r-tools-plotly-contour2d-axis-no-scale}
### Без масштаба осей

Общий вид графика сохраняется, однако вместо значений по осям `x` и `y` будет отложено количество точек, использованное для построения.

```{r}
x <- y <- seq(0, pi/2, length.out = 100) # <1>
z <- outer(x, y,                         # <2>
           \(x,y) { sin(x*y) })|>        # <3>
  t()                                    # <4>

plot_ly(z = z,                           # <5> 
        type='contour') |>               # <6>
  pshow() 
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $\frac{\pi}{2}$.
2.  С помощью функции `outer` @sec-r-tools-basic-outer генерируем матрицу @sec-r-lang-basic-matrix размером `100x100`
3.  Для каждой комбинации `x,y` будет вызвана переданная лямбда функция @sec-r-lang-advanced-lambda . Матрица передаётся с помощью оператора конвейера @sec-r-tools-basic-pipe в функцию транспонирования `{r} t() |> dl()`.
4.  Матрица транспонируется `{r} t() |> dl()` для соответствия осей матрицы осям графика.
5.  Передаём данные для построения.
6.  Используется тип графика контурный.
:::

::: {#exm-r-tools-plotly-contour2d-axis-scale}
### С масштабом осей

```{r}
x <- y <- seq(0, pi/2, length.out = 100) # <1>
z <- outer(x, y,                         # <2>
           \(x,y) { sin(x*y) })|>        # <3>
  t()                                    # <4>

plot_ly(x = x, y = y, z = z,             # <5> 
        type='contour') |>               # <6>
  pshow()                               
```

1.  Используя функцию `{r} seq() |> dl()` создаём вектор `x` из 100 точек от $0$ до $\frac{\pi}{2}$.
2.  С помощью функции `{r} outer() |> dl()` @sec-r-tools-basic-outer генерируем матрицу @sec-r-lang-basic-matrix размером `100x100`
3.  Для каждой комбинации `x,y` будет вызвана переданная лямда функция @sec-r-lang-advanced-lambda . Матрица передаётся с помощью оператора конвейера @sec-r-tools-basic-pipe в функцию транспонирования `{r} t() |> dl()`.
4.  Матрица транспонируется `{r} t() |> dl()` для соответствия осей матрицы осям графика.
5.  Передаём данные для построения, кроме `z` ещё и `x` с `y`.
6.  Используется тип графика контурный.
:::

## 3D График плотности срезов {#sec-r-tools-plotly-slice3d}

Создаёт контурный график по поверхности среза как функцию $u=f(x,y,z)$.

```{r}
#| warning: false
#| message: false

library(plotly)

f <- \(x,y,z) x^2-5*y^2-3*z^2+x*y-2*x*z+2*y*z+11*x+2*y+18*z+10 # <1>
x <- y <- z <- seq(-5, 5, length.out = 20)                     # <2>
d <- tidyr::crossing(x = x, y = y, z = z)                      # <3>  
u <- purrr::pmap_dbl(d,f)                                      # <4>

plot_ly(data = d,                                       # <5>
  type='isosurface',                                           # <6>
  x = ~x, y = ~y, z = ~z,                                      # <7>
  value = u,                                                   # <8>
  isomin = -100, isomax = 100,                                 # <9>
  colorscale='RdBu',                                           # <10>
  surface = list(show = TRUE, count = 1),                      # <11>
  slices = list(z = list(show = TRUE, locations = -5:5),       # <12>
                y = list(show = TRUE, locations = 0)),         # <13>
  caps = list(x = list(show = FALSE),                          # <14>
              y = list(show = FALSE))) |>                      # <15>
  pshow_protected()
```

1.  Задаём функцию $u=f(x,y,z)$ с помощью лямда функции @sec-r-lang-advanced-lambda.
2.  Используя функцию `{r} seq() |> dl()` создаём вектора `x,y,z` из $20$ точек от $-5$ до $5$.
3.  С помощью функции @sec-r-tools-tidyr-crossing генерируем датафрейм @sec-r-tools-tibble размером `20x20x20` в котором будут все комбинации значений переменных `x`, `y` и `z`.
4.  Применяем функцию `f` к каждой строке датафрейма `d` с помощью функции `{r} purrr::pmap_dbl() |> dl()` @sec-r-tools-purrr-pmap в результате получаем вектор `u`, который содержит значения функции для всех точек её области определения.
5.  Вызываем функцию построения графика `{r} plotly::plot_ly() |> dl()` и передаём туда датафрейм с координатами точек построения.
6.  Определяем тип графика контурные поверхности
7.  С помощью формул @sec-r-lang-advanced-formula показываем от каких переменных из датафрейма зависят оси.
8.  Передаём вектор со значениями функции
9.  Определяем минимальное и максимальное значение `u` для отрисовки контурных линий.
10. Выбираем нестандартную цветовую палитру для лучшей визуализации.
11. Добавляем на график одну поверхность соответствующую уравнению $u=f(x,y,z)=const$
12. Добавляем 5 срезы по оси `z` от $-5$ до $5$ с шагом $1$
13. Добавляем один срез по оси `y`
14. Отключаем отображение координатной сетки по оси `x`
15. Отключаем отображение координатной сетки по оси `y`

## Комбинированные графики {#sec-r-tools-plotly-combine}

Можно добавлять элементы на график последовательно отображая их.

```{r}
#| warning: false
#| message: false


library(plotly)
x <- y <- seq(0, pi/2, length.out = 100)
z <- outer(x, y, \(x,y) { sin(x*y) })|>t()

fig <- plot_ly(x = x, y = y, z = z, type='contour')
fig |> pshow()
```

Теперь добавим линию

```{r}
#| warning: false
#| message: false

fig <- fig |> add_trace(x = x,
                        y = ~cos(x),
                        type = 'scatter',
                        mode = 'lines', 
                        name = 'cos')
fig |> pshow_protected()
```

И выделим точки на этой линии

```{r}
#| warning: false
#| message: false

fig <- fig |> 
  add_trace(x = c(0.4, 0.6, 1),
            y = cos(c(0.4,0.6,1)),
            type = 'scatter',
            mode = 'markers',
            name = 'points',
              marker = list(color = 'red'))
fig |> pshow_protected()
```

## Дополнительные возможности {#sec-r-tools-plotly-extra}
