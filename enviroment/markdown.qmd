# Язык разметки Markdown

диаграмма обработки markdown

Рабочие блокноты Quarto основаны на проекте Pandoc и используют язык разметки Мarkdown.

Markdown — это простой текстовый формат, который легко писать и, что еще более важно, легко читать:

> Документ в формате Markdown должен быть доступен для публикации как есть, как обычный текст, не создавая впечатление, будто он размечен тегами или инструкциями по форматированию. -- [John Gruber](https://daringfireball.net/projects/markdown/syntax#philosophy)

Рассмотрим наиболее часто встречаемые примитивы разметки

## Блоки кода

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

Code blocks that use braces around the language name (e.g. ```` ```{r} ````) are executable, and will be run by Quarto during render. Here is a simple example:

```` markdown

## Air Quality

@fig-airquality further explores the impact of temperature on ozone level.

```{{r}}
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
````

You'll note that there are some special comments at the top of the code block. These are cell level options that make the figure [cross-referenceable](/docs/authoring/cross-references.qmd).

This document results in the following rendered output:

![](/images/hello-knitr.png){.border fig-alt="Example output with title (ggplot2 demo), author (Norah Jones), and date (5/22/2021). Below is a header reading Air Quality followed by body text (Figure 1 further explores the impact of temperature on ozone level.) with a toggleable code field, and figure with caption that reads Figure 1 Temperature and ozone level."}

You can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).

There are many options which control the behavior of code execution and output, you can read more about them in the article on [Execution Options](execution-options.qmd).

In addition to code blocks which interrupt the flow of markdown, you can also include code inline. Read more about inline code in the [Inline Code](inline-code.qmd) article.

Code blocks that use braces around the language name (e.g. ```` ```{python} ````) are executable, and will be run by Quarto during render. Here is a simple example:

```` markdown
---
title: "matplotlib demo"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

You'll note that there are some special comments at the top of the code block. These are cell level options that make the figure [cross-referenceable](/docs/authoring/cross-references.qmd).

This document would result in the following rendered output:

![](/images/hello-jupyter.png){.border fig-alt="Example output where header reads: matplotlib demo, the body reads: For a demonstration of a line plot on a polar axis, see Figure 1. Below the body text is a toggleable field to reveal the code, and the Figure 1 image with a caption that reads: Figure 1: A line plot on a polar axis."}

You can produce a wide variety of output types from executable code blocks, including plots, tabular output from data frames, and plain text output (e.g. printing the results of statistical summaries).

## Inline code

Inline code allows you to execute code within markdown, e.g. to automatically use the most up-to-date computations in narrative. Quarto provides an inline code syntax that works across all three engines (Jupyter, Knitr and OJS).

The syntax for inline code is similar to code blocks, except you use a single tick (`` ` ``) rather than triple ticks (```` ``` ````), and you can use it in the middle of markdown. For example, the following code stores the variable `radius` in a code block and then accesses it in a sentence using inline code:


```{r}
radius <- 5
```

The radius of the circle is `{r} radius`

## Keep Inline Code Simple

Inline expressions should be confined to simple values that you have pre-computed within normal code cells (rather than function calls that do non-trivial work). This is because the protocol used for inline expressions is not compatible with some Python libraries (especially those that use multi-threading or multi-processing).

## Using python and r together

Здесь вызвать пару R команд.

### Rendering

When a Quarto document is rendered, R code blocks are automatically executed.

Using the **Render** button in RStudio:

The top section of a qmd file as displayed in RStudio. There is a toolbar right above the document containing various options, including 'Render.' There is a stylized, segmented blue arrow pointing at the word. По умолчанию документ qmd конвертируется в html. The **Render** button will render the first format listed in the document YAML. If no format is specified, then it will render to HTML.

## Chunk Options {#chunk-options}

You can set a label for a code chunk with the `label` option:

```` markdown
```{{r}}
#| label: convert
airquality$TempC <- (5 / 9) * (airquality$Temp - 32)
```
````

The `echo: false` option disables the printing of code (only output is displayed).

```` markdown
``` r
library(tidyverse)
library(palmerpenguins)
penguins |>
  mutate(
    bill_ratio = bill_depth_mm / bill_length_mm,
    bill_area  = bill_depth_mm * bill_length_mm
  )
```

Line 3  
Take `penguins`, and then,

Lines 4-7  
add new columns for the bill ratio and bill area.
````

## Output Options

There are a wide variety of options available for customizing output from executed code. All of these options can be specified either globally (in the document front-matter) or per code-block. For example, here's a modification of the Python example to specify that we don't want to "echo" the code into the output document:

``` yaml
---
title: "My Document"
execute:
  echo: false
jupyter: python3
---
```

Note that we can override this option on a per code-block basis. For example:

```{{python}}
#| echo: true

import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.show()
```

Code block options are included in a special comment at the top of the block (lines at the top prefaced with `#|` are considered options).

Options available for customizing output include:

+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option    | Description                                                                                                                                                                                       |
+===========+===================================================================================================================================================================================================+
| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `echo`    | Include the source code in output                                                                                                                                                                 |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `warning` | Include warnings in the output.                                                                                                                                                                   |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `error`   | Include errors in the output (note that this implies that errors executing code will not halt processing of the document).                                                                        |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Here's a Knitr example with some of these additional options included:

````         
---
title: "Knitr Document"
execute:
  echo: false
---

```{r}
#| warning: false

library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess", se = FALSE)
```

```{{r}}
summary(airquality)
```
````

### Caption and Alt Text

You can specify the caption and alt text for figures generated from code using the `fig-cap` and `fig-alt` options. For example, here we add these options to a Python code cell that creates a plot:

```{{python}}
#| fig-cap: "Polar axis plot"
#| fig-alt: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Форматирование текста

+-------------------------------------------+-------------------------------------------+
| Язык разметки Markdown                    | Результат                                 |
+===========================================+===========================================+
| ``` markdown                              | *курсив*, **жирный**, ***жирный курсив*** |
| *курсив*, **жирный**, ***жирный курсив*** |                                           |
| ```                                       |                                           |
+-------------------------------------------+-------------------------------------------+
| ``` markdown                              | верхний индекс^2^ / нижний индекс~2~      |
| верхний индекс^2^ / subscript~2~          |                                           |
| ```                                       |                                           |
+-------------------------------------------+-------------------------------------------+
| ``` markdown                              | ~~зачёркутый~~                            |
| ~~зачёркнутый~~                           |                                           |
| ```                                       |                                           |
+-------------------------------------------+-------------------------------------------+

## Заголовки

+------------------------+--------------------+
| Язык разметки Markdown | Результат          |
+========================+====================+
| ``` markdown           | ## Заголовок 2     |
| ## Заголовок 2         |                    |
| ```                    |                    |
+------------------------+--------------------+
| ``` markdown           | ### Заголовок 3    |
| ### Заголовок 3        |                    |
| ```                    |                    |
+------------------------+--------------------+
| ``` markdown           | #### Заголовок 4   |
| #### Заголовок 4       |                    |
| ```                    |                    |
+------------------------+--------------------+
| ``` markdown           | ##### Заголовок 5  |
| ##### Заголовок 5      |                    |
| ```                    |                    |
+------------------------+--------------------+
| ``` markdown           | ###### Заголовок 6 |
| ###### Заголовок 6     |                    |
| ```                    |                    |
+------------------------+--------------------+

: Заголовки

## Ссылки и Изображения

+----------------------------------------------------------+-----------------------------------------------------------------+
| Язык разметки Markdown                                   | Результат                                                       |
+==========================================================+=================================================================+
| ``` markdown                                             | <https://rct.bsu.by>                                            |
| <https://rct.bsu.by>                                     |                                                                 |
| ```                                                      |                                                                 |
+----------------------------------------------------------+-----------------------------------------------------------------+
| ``` markdown                                             | [Наш факультет](https://bsu.by)                                 |
| [Название](https://rct.bsu.by)                           |                                                                 |
| ```                                                      |                                                                 |
+----------------------------------------------------------+-----------------------------------------------------------------+
| ``` markdown                                             | ![Наш факультет](rctbsu.png){width="100"}                       |
| ![Название](rctbsu.png)                                  |                                                                 |
| ```                                                      |                                                                 |
+----------------------------------------------------------+-----------------------------------------------------------------+
| ``` markdown                                             | [![Наш факультет](rctbsu.png){width="100"}](https://rct.bsu.by) |
| [![Название](rctbsu.png)](https://rct.bsu.by)            |                                                                 |
| ```                                                      |                                                                 |
|                                                          |                                                                 |
| Картинка становится кликабельной при подстановке в html. |                                                                 |
+----------------------------------------------------------+-----------------------------------------------------------------+

## Cross References

You can cross-reference figures by adding an ID with the `fig-` prefix to them, and then referencing the figure using the `@` prefix. For example:

``` markdown
![An Elephant](elephant.png){#fig-elephant}

This is illustrated well by @fig-elephant.
```

For figures produced by executable code cells, include a `label` with a `fig-` prefix to make them cross-referenceable. For example:

```` markdown
For a demonstration of a line plot, see @fig-cars-plot.

```{{r}}
#| label: fig-cars-plot
#| fig-cap: "Cars plot "

plot(cars)
```
````

### Layout

Note that figure layout attributes also work for figures produced by executable code blocks. Here are examples for both Jupyter and Knitr:

```{{r}}
#| layout-ncol: 2
#| fig-cap: 
#|   - "Speed and Stopping Distances of Cars"
#|   - "Vapor Pressure of Mercury as a Function of Temperature"

plot(cars)
plot(pressure)
```

```{r}
#| layout-ncol: 2
#| fig-cap: 
#|   - "Speed and Stopping Distances of Cars"
#|   - "Vapor Pressure of Mercury as a Function of Temperature"

plot(cars)
plot(pressure)
```

Note that in these examples we also use the `fig-cap` option to apply a caption to each of the generated figures.

### Subcaptions

You can create subcaptions for computational output by combining the `fig-cap` and `fig-subcap` options. When applying captions to computational output you can optionally include a `label` with a `fig-` prefix---if you do this then the figure will be numbered and [cross-referenceable](cross-references.qmd).

```{{r}}
#| label: fig-charts
#| fig-cap: "Charts"
#| fig-subcap: 
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

plot(cars)
plot(pressure)
```

```{r}
#| label: fig-charts
#| fig-cap: "Charts"
#| fig-subcap: 
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

plot(cars)
plot(pressure)
```

::: callout-note
Опять только при подстановке в html
:::

## Списки

+--------------------------------+-------------------------------+
| Язык разметки Markdown         | Output                        |
+================================+===============================+
| ``` markdown                   | -   маркированный список      |
| * маркированный список         |     -   пункт 1               |
|     + пункт 1                  |     -   пункт 2               |
|     + пункт 2                  |         -   подпункт 1        |
|         - подпункт 1           |                               |
| ```                            |                               |
+--------------------------------+-------------------------------+
| ``` markdown                   | 1.  ordered list              |
| 1. нумерованный список         | 2.  item 2                    |
| 2. пункт 2                     |     i)  sub-item 1            |
|     i) подпункт 1              |         A.  sub-sub-item 1    |
|          A.  вложение 1        |                               |
| ```                            |                               |
+--------------------------------+-------------------------------+
| ``` markdown                   | -   [ ] Задача 1              |
| - [ ] Задача 1                 | -   [x] Задача 2              |
| - [x] Задача 2                 |                               |
| ```                            |                               |
+--------------------------------+-------------------------------+
| ``` markdown                   | (1) Сквозная нумерация списка |
| (@)  Сквозная нумерация списка |                               |
|                                | продолжается после            |
| продолжается после             |                               |
|                                | (2) прерывания                |
| (@)  прерывания                |                               |
| ```                            |                               |
+--------------------------------+-------------------------------+
| ``` markdown                   | термин                        |
| термин                         |                               |
| : его определение              | :   его определение           |
| ```                            |                               |
+--------------------------------+-------------------------------+

### Block Layout

While the examples above illustrate laying out figures, it's important to note that layout attributes can be used to layout any sort of block content. For example, here we layout 2 lists side-by-side:

``` markdown
::: {layout-ncol=2}
### List One

- Item A
- Item B
- Item C

### List Two

- Item X
- Item Y
- Item Z
:::
```

::: {layout-ncol=2}
#### Первый списко

- Элемент A
- Элемент B
- Элемент C

#### Второй список

- Элемент X
- Элемент Y
- Элемент Z
:::

::: callout-note
Только при конвертации в html
:::

## Таблицы

### Простые таблицы

В обычных таблицах могут содержаться только элементы представленные простым текстом.

#### Разметка Markdown

Выравнивание по

``` markdown
| Правому краю | Левому краю | Умолчанию | Центру |
|-------------:|:------------|-----------|:------:|
|           12 | 12          | 12        |   12   |
|          123 | 123         | 123       |  123   |
|            1 | 1           | 1         |   1    |
```

#### Результат

Выравнивание по

| Правому краю | Левому краю | Умолчанию | Центру |
|-------------:|:------------|-----------|:------:|
|           12 | 12          | 12        |   12   |
|          123 | 123         | 123       |  123   |
|            1 | 1           | 1         |   1    |

### Расширенные таблицы (grid tables)

Grid tables are a more advanced type of markdown tables that allow arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). For example: The row of =s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.)

Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:

#### Разметка Markdown

``` markdown
+-----------+-----------+--------------------+
| Fruit     | Price     | Advantages         |
+===========+===========+====================+
| Bananas   | $1.34     | - built-in wrapper |
|           |           | - bright color     |
+-----------+-----------+--------------------+
| Oranges   | $2.10     | - cures scurvy     |
|           |           | - tasty            |
+-----------+-----------+--------------------+

: Пример расширенной таблицы
```

#### Результат

+------------+------------+----------------------+
| Fruit      | Price      | Advantages           |
+============+============+======================+
| Bananas    | \$1.34     | -   built-in wrapper |
|            |            | -   bright color     |
+------------+------------+----------------------+
| Oranges    | \$2.10     | -   cures scurvy     |
|            |            | -   tasty            |
+------------+------------+----------------------+

: Пример расширенной таблицы

## Формулы

Для вставки формулы в текст используется `$`. Для выделения отдельным блоком используется `$$`. Например:

+--------------------------------+------------------------------+
| Язык разметки Markdown         | Результат                    |
+================================+==============================+
| ``` markdown                   | формула в тексте: $E=mc^{2}$ |
| формула в тексте: $E = mc^{2}$ |                              |
| ```                            |                              |
+--------------------------------+------------------------------+
| ``` markdown                   | отдельный блок формул:       |
| отдельный блок формул:         |                              |
|                                | $$E = mc^{2}$$               |
| $$E = mc^{2}$$                 |                              |
| ```                            |                              |
+--------------------------------+------------------------------+
: Формулы

Перекрёстная ссылка на LaTeX

## Диаграммы

Quarto has native support for embedding [Mermaid](https://mermaid-js.github.io/mermaid/#/) and [Graphviz](https://graphviz.org/) diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, Gantt charts, and more using a plain text syntax inspired by markdown.

For example, here we embed a flowchart created using Mermaid:

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

Quarto has native support for embedding [Mermaid](https://mermaid-js.github.io/mermaid/#/) and [Graphviz](https://graphviz.org/) diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gantt charts, and more using a plain text syntax inspired by markdown.

For example, here we embed a flowchart created using Mermaid:

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

As illustrated above, Mermaid diagrams are embedded using `{mermaid}` executable cells. Graphviz diagrams are embedded using `{dot}` executable cells. Note that cell options are added with slightly different syntax: `%%|` for `{mermaid}`, and `//|` for `{dot}`.

Mermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. Mermaid diagrams use `%%` as their comment syntax, and so cell options are declared using `%%|`. Cell options **must** be included directly beneath the start of the diagram code chunk.

Above we demonstrated a flowchart created with Mermaid, here is a sequence diagram (also embedded using a `{mermaid}` executable cell): To learn more about using Mermaid, see the [Mermaid website](https://mermaid-js.github.io/mermaid/) or the [Mermaid book](https://www.amazon.com/Official-Guide-Mermaid-js-beautiful-flowcharts-dp-1801078025/dp/1801078025) (which is written by the creator of Mermaid).

## Цитаты

``` markdown
 > Blockquote
```

> Это короткая цитата

## Специальные символы

+-----------------+---------------+
| Markdown Syntax | Output        |
+=================+===============+
| ``` markdown    | endash: --    |
| endash: --      |               |
| ```             |               |
+-----------------+---------------+
| ``` markdown    | emdash: ---   |
| emdash: ---     |               |
| ```             |               |
+-----------------+---------------+

::: callout-note
Символы подставляются только при конвертации в html
:::
