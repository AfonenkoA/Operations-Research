---
cache: false
freeze: false
---

# Условная оптимизация функции многих переменных {#sec-nonlinear-constrained-many}

::: {.callout-caution title="Состояние разработки"}
Требуется доработка
:::

```{r}
#| include: false
slog <- \(x) sign(x)*log(abs(x))
```

## Прямоугольные ограничения неравенства {#sec-nonlinear-constrained-many-rectangle}

$$
\begin{cases}
\min{F(\vec{x})}=x_1^2+x_2^2+x_1x_2+2x_1+4x_2+5\\
-4 \leq x_1 \leq 4 \\
2 \leq x_2 \leq 3
\end{cases}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1, p2) {
  p1^2 + p2^2 + p1 * p2 + 2 * p1 + 4 * p2 + 5
}) |>
  slog() |>
  t()
plot_ly(x = x, y = y, z = z, type = "contour", ncontours = 25, name = "F(p)") |>
  add_trace(
    x = c(-4, -4, 4, 4),
    y = c(2, 3, 3, 2),
    fill = "toself",
    name = "ограничения",
    type = "scatter",
    marker = list(color = "red")
  ) |>
  add_trace(
    x = 0,
    y = -2,
    name = "безусловный минимум",
    type = "scatter",
    marker = list(color = "red")
  ) |>
  pshow()
```

Преобразуем ограничения

$$
\begin{cases}
g_1:x_1 + 4 \geq 0\\
g_2:4 - x_1 \geq 0\\
g_3:x_2 - 2 \geq 0\\
g_4:3 - x_2 \geq 0
\end{cases}
$$

Запишем функцию лагранжа нашей системы

$$
\begin{cases}
L(\vec{x},\vec{\mu}) = F(x) - \sum_{i=1}^4{\mu_i g_i} \\
L(\vec{x},\vec{\mu}) = x_1^2+x_2^2+x_1 x_2+2 x_1+4 x_2+5 - \mu_1(x_1+4) - \mu_2(4-x_1) - \mu_3(x_2-2) - \mu_4 (3-x_2)\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_1}=2x_1 + x_2 + 2 - \mu_1 + \mu_2 = 0\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_2}=2x_2 + x_1 + 4 - \mu_3 + \mu_4 = 0\\
g_1:\mu_1(x_1+4)=0\\
g_2:\mu_2(4-x_1)=0\\
g_3:\mu_3(3-x_2)=0\\
g_4:\mu_4(3-x_2)=0\\
\mu_1,\mu_2,\mu_3,\mu_4\geq0 
\end{cases}
$$

Необходимо найти решение этой системы. Подход заключается в следующем: будем рассматривать для каждого $\mu_i>0$ и $\mu_i=0$ . Предположим, что $\mu_1>0$, следовательно из уравнения для $g_1 \implies x_1=-4, \mu_2=0$. Запишем полученную систему

$$
\begin{cases}
x_2-6-\mu_1=0\\
2x_2-\mu_3+\mu_4=0\\
\mu_3(x_2-2)=0\\
\mu_4(3-x_2)=0\\
\mu_1,\mu_3,\mu_4\geq0 
\end{cases}
$$

Далее опять предположим, что $\mu_3>0$. Из этого следует, что $x_2=2$ и $\mu_1=-4$, что является противоречием. Рассмотрим случай, когда $\mu_3=0$. Предположим, что $\mu_4>0$. Из этого следует, что $x_2=3$ и $\mu_1=-3$, что является противоречием. Далее проверим $\mu_4=0$, получаем $x_2=0$ и $\mu_1=-6$, что опять приводит к противоречию. Следовательно $\mu_3=0$.

Таким образом перебрав все 'ветви' системы приходим к решению:

$$
\begin{cases}
x_1 = -2\\
x_2 = 2\\
\mu_1 = 0\\
\mu_2 = 0\\
\mu3 = 6\\
\mu_4 = 0
\end{cases}
$$

Получаем, что минимум в точке $(-2,2,13)$. Докажем, это это минимум. Матрица Гессе функции $F(x_1,x_2)$ выглядит следующим образом

$$
\begin{bmatrix}2 & 1\\1 & 2\end{bmatrix}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)


x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1,p2) { p1^2+p2^2+p1*p2+2*p1+4*p2 +5}) |> slog() |> t()
plot_ly(x=x, y=y, z=z, type='contour', ncontours=30 , name='F(p)') |> 
  add_trace(
    x = c(-4,-4,4,4),
    y = c(2,3,3,2),
    fill = 'toself',
    name = 'ограничения',
    type = 'scatter',
    marker = list(color = 'red')) |>
    add_trace(
    x = 0,
    y = -2,
    name = 'безусловный минимум',
    type = "scatter",
    marker = list(color = "red")) |>
    add_trace(
    x = -2,
    y = 2,
    name = 'условный минимум',
    type = "scatter",
    marker = list(color = "red")) |>
  pshow()
```

## Линейные ограничения неравенства {#sec-nonlinear-constrained-many-linear}

Являются частным случаем нелинейных, большинство алгоритмов работает с ними, как с нелинейными.

$$
\begin{cases}
      \min{F(\vec{x})}=x_1^2+x_2^2+x_1x_2+2x_1+4x_2+5\\
      2 x_1 + x_2 \geq 0\\
      x_1 + 2 x_2 \leq 1
\end{cases}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1, p2) {p1 ^ 2 + p2 ^ 2 + p1 * p2 + 2 * p1 + 4 * p2 + 5}) |> slog() |> t()
l1_x <- seq(-5/2, 5/2, length.out = 100)
l2 <- (1 - x) / 2
l1 <- -2 * l1_x
plot_ly(
  x = x,
  y = y,
  z = z,
  type = "contour",
  ncontours = 30,
  name = 'F(p)'
) |>
  add_trace(
    x = c(5, 5, -1/3,  2.5),
    y = c(-5, -2, 2/3, -5),
    fill = 'toself',
    name = 'ограничения',
    type = "scatter",
    marker = list(color = 'red')
  ) |>
  add_trace(
    x = 0,
    y = -2,
    name = 'безусловный минимум',
    type = 'scatter',
    marker = list(color = 'red')
  ) |>
  add_trace(x=l1_x,y=l1,type='scatter', mode='lines', name=TeX('l_1')) |>
  add_trace(x=x,y=l2,type='scatter', mode='lines', name=TeX('l_2')) |>
  config(mathjax = 'local') |>
  pshow_safe()

```

Преобразуем ограничения

$$
\begin{cases}
g_1:(2 x_1 + x_2) \geq 0\\
g_2:(-x_1-2x_2+1) \geq 0
\end{cases}
$$

Сформируем функцию Лагранжа

$$
\begin{cases}
L(\vec{x},\vec{\mu})=x_1^2+x_2^2+x_1x_2+2x_1+4x_2+5-\mu_1(2x_1+x_2)-\mu_2(-x_1-2x_2+1)\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_1}=2x_1 + x_2 + 2 - 2\mu_1 + \mu_2 = 0\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_2}=2x_2 + x_1 + 4 - \mu_1 + 2\mu_2 = 0\\
g_1:\mu_1(2x_1+x_2)=0\\
g_2:\mu_2(-x_1-2x_2+1)=0\\
\mu_1,\mu_2 \geq 0
\end{cases}
$$

Допустим, что $\mu_1>0$, тогда $(2x_1+x_2)=0$, $x_2=-2x_1$, откуда система:

$$
\begin{cases}
2-2\mu_1+\mu_2=0\\
4-3x_1-\mu_1+2\mu_2=0\\
\mu_2(3x_1+1)=0\\
\mu_1,\mu_2>0
\end{cases}
$$

Предположим, что $\mu_2>0$, следовательно $x_1=-\frac{1}{3}$ и система преобразуется в:

$$
\begin{cases}
2-2\mu_1+\mu_2=0\\
7-\mu_1+2\mu_2=0\\
\mu_1,\mu_2>0
\end{cases}
$$

Откуда следует, что $\mu_2=-4$, что является противоречием. Рассмотрим случай, когда $\mu_2=0$. Тогда

$$
\begin{cases}
2-2\mu_1=0\\
4-3x_1-\mu_1=0\\
\mu_1>0
\end{cases}
$$

Легко получить решение:

$$
\begin{cases}
x_1 = 1\\
x_2 = -2\\
\mu_1 = 1\\
\mu_2 = 0
\end{cases}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1, p2) {p1 ^ 2 + p2 ^ 2 + p1 * p2 + 2 * p1 + 4 * p2 + 5}) |> slog() |> t()
l1_x <- seq(-5/2, 5/2, length.out = 100)
l2 <- (1 - x) / 2
l1 <- -2 * l1_x
plot_ly(
  x = x,
  y = y,
  z = z,
  type = "contour",
  ncontours = 30,
  name = 'F(p)'
) |>
  add_trace(
    x = c(5, 5, -1/3,  2.5),
    y = c(-5, -2, 2/3, -5),
    fill = 'toself',
    name = 'ограничения',
    type = "scatter",
    marker = list(color = 'red')
  ) |>
  add_trace(
    x = 0,
    y = -2,
    name = 'безусловный минимум',
    type = 'scatter',
    marker = list(color = 'red')
  ) |>
  add_trace(
    x = 1,
    y = -2,
    name = 'условный минимум',
    type = 'scatter',
    marker = list(color = "red")) |>
  add_trace(x=l1_x,y=l1,type='scatter', mode='lines', name=TeX('l_1')) |>
  add_trace(x=x,y=l2,type='scatter', mode='lines', name=TeX('l_2')) |>
  config(mathjax = 'local') |>
  pshow_safe()

```

## Нелинейные ограничения равенства {#sec-nonlinear-constrained-nonlinear}

$$
\begin{cases}
\min{F(\vec{x})}=x_1^2+x_2^2+x_1x_2+2x_1+4x_2+5\\
g1:x_1^2 - x_1 x_2 = -2
\end{cases}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1, p2) {p1 ^ 2 + p2 ^ 2 + p1 * p2 + 2 * p1 + 4 * p2 + 5}) |> slog() |> t()
p1_x <- seq(1/2*(5-sqrt(17)), 1/2*(5+sqrt(17)), length.out = 100)
p2_x <- seq(1/2*(-5-sqrt(17)), 1/2*(-5+sqrt(17)), length.out = 100)
p1 <- (2 + p1_x^2)/p1_x
p2 <- (2 + p2_x^2)/p2_x
plot_ly(
  x = x,
  y = y,
  z = z,
  type = "contour",
  ncontours = 30,
  name = 'F(p)'
) |>
  add_trace(
    x = 0,
    y = -2,
    name = 'безусловный минимум',
    type = 'scatter',
    marker = list(color = 'red')
  ) |>
  add_trace(x=p1_x,y=p1,type='scatter', mode='lines', name=TeX('l_1')) |>
  add_trace(x=p2_x,y=p2,type='scatter', mode='lines', name=TeX('l_2')) |>
  config(mathjax = 'local')  |>
  pshow_safe()
```

Переформулируем ограничения

$$x_1^2 - x_1 x_2 + 2 = 0$$

Сформируем функцию Лагранжа

$$
\begin{cases}
L(\vec{x},\vec{\mu})=x_1^2+x_2^2+x_1x_2+2x_1+4x_2+5-\mu_1(x_1^2-x_1x_2+2)\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_1}=2x_1 + x_2 + 2 - \mu_1(2x_1-x_2)= 0\\
\frac{\partial L(\vec{x},\vec{\mu})}{\partial x_2}=2x_2 + x_1 + 4 + \mu_1 x_1 = 0\\
g_1:\mu_1(x_1^2-x_1x_2+2)=0\\
\mu_1 \geq 0
\end{cases}
$$

Пусть $\mu_1>0$, тогда $x_1^2-x_1x_2+2=0$. Рассмотрим случай, когда $x_1=x_2$. Система представляется так:

$$
\begin{cases}
2x_1+x_2+2-\mu_1(2x_1-x_2)=0\\
2x_2+x_1+4+\mu_1x_1=0\\
\mu_1(x_1^2-x_1x_2+2)=0\\
\mu_1\geq 0
\end{cases}
$$

Пусть $\mu_1>0$, следовательно $x_1^2-x_1x_2+2=0$. Выразим $x_2=\frac{2+x_1^2}{x_1}$, тогда система после подстановки и преобразования:

$$
\begin{cases}
x_1^2(3-\mu_1)+2x_1+\mu_1+2=0\\
(3+\mu_1)x_1^2+4x_1+4=0\\
\end{cases}
$$

Выразим из второго уравнения

$$
\mu_1=-\frac{3x_1^2+4x_1+4}{x_1^2}
$$

И подставим в первое

$$
6x_1^4+6x_1^3-8x_1-8=0
$$

Отсюда подбором получается корень $x_1=-1$. Общее решение:

$$
\begin{cases}
x_1=-3\\
x_2=-3\\
\mu_1=1
\end{cases}
$$

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

x <- y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, \(p1, p2) {p1 ^ 2 + p2 ^ 2 + p1 * p2 + 2 * p1 + 4 * p2 + 5}) |> slog() |> t()
p1_x <- seq(1/2*(5-sqrt(17)), 1/2*(5+sqrt(17)), length.out = 100)
p2_x <- seq(1/2*(-5-sqrt(17)), 1/2*(-5+sqrt(17)), length.out = 100)
p1 <- (2 + p1_x^2)/p1_x
p2 <- (2 + p2_x^2)/p2_x
plot_ly(
  x = x,
  y = y,
  z = z,
  type = "contour",
  ncontours = 30,
  name = 'F(p)'
) |>
  add_trace(
    x = 0,
    y = -2,
    name = 'безусловный минимум',
    type = 'scatter',
    marker = list(color = 'red')
  ) |>
    add_trace(
    x = -1,
    y = -3,
    name = 'условный минимум',
    type = 'scatter',
    marker = list(color = 'red')
  ) |>
  add_trace(x=p1_x,y=p1,type='scatter', mode='lines', name=TeX('l_1')) |>
  add_trace(x=p2_x,y=p2,type='scatter', mode='lines', name=TeX('l_2')) |>
  config(mathjax = 'local')  |>
  pshow_safe()
```
