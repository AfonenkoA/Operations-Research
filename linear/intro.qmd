# Линейное программирование

$$\begin{cases}
      \max{F(x)=2x_1+6x_2}\\
      x_1+4x_2\leq2048\\
      2x_1+x_2\leq2048\\
      x2\leq480\\
      x1,x2\geq0
\end{cases}\,$$

Задача 1 найти область удовлетворяющую ограничениям. Сразу можно сказать, что рассматривается первая четверть из-за ограничения на положительность переменных. Определим функцию для построения замкнутой области на графике используя библиотеку **plotly**.

```{r}
#| echo: false
#| warning: false
#| message: false

library(plotly)

add_region <- function(fig, xy, name = 'region', color) {
  add_trace(
    fig,
    x = xy[, 1],
    y = xy[, 2],
    type = 'scatter',
    fill = 'toself',
    fillcolor = color,
    hoveron = 'points+fills',
    marker = list(color = 'red'),
    line = list(color = color),
    text = apply(xy, 1, paste, collapse = ','),
    hoverinfo = 'text',
    name = TeX(name)
  )
}
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: asis


library(plotly)
library(widgetframe)

plot_ly(mode = 'lines+markers') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 2048 / 4), c(2048, 0)),
    color = 'rgba(0, 0, 0, 0.2)',
   name = 'x_1+4x_2\\leq2048') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 2048), c(2048 / 2, 0)),
    color = 'rgba(0, 255, 255, 0.3)',
    name = '2x_1+x_2\\leq2048') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 480), c(2048, 480), c(2048, 0)),
    color = 'rgba(255, 255, 0, 0.4)',
    name = 'x_2\\leq480') |> 
  config(mathjax = 'cdn') |>
  frameableWidget()
```

Итоговая область поиска:

```{r}
#| echo: false
#| warning: false
#| message: false

plot_ly(mode = 'lines+markers') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 480), c(128, 480), c(6144 / 7, 2048 / 7), c(2048 / 2, 0)),
    name = 'region',
    color = 'rgba(51, 0, 153, 0.4)') |>
  config(mathjax = 'cdn')
```

Теперь можно добавить график уровня функции и совместить его с графиком ограничений

```{r}
#| echo: false
#| warning: false
#| message: false

x <- seq(0, 1100, length.out = 100)
y <- seq(0, 500, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
  2 * x1 + 6 * x2
}) |> t()

plot_ly(x = x, y = y, z = z, type = 'contour') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 480), c(128, 480), c(6144 / 7, 2048 / 7), c(2048 / 2, 0)),
    color = 'rgba(0, 0, 0, 0.3)')
```

Следовательно наилучшее значение функции в точке $(x=\frac{6144}{7},y=\frac{2048}{7})$

## Особые случаи применеия симплекс метода

### Альтернативные решения

$$\begin{cases}
      \max{F(x)=x_1+2x_2}\\
      x_1\leq80\\
      5x_1+6x_2\leq600\\
      x_1+2x_2\leq160\\
      x1,x2\geq0
\end{cases}\,$$

Изобразим область поиска соответствующую ограничениям

```{r}
#| echo: false
#| warning: false
#| message: false

plot_ly(mode = 'lines+markers') |>
  add_region(
    xy = rbind(c(0, 100), c(120, 0), c(0, 0)),
    name = '5x_1+6x_2\\leq600',
    color = 'rgba(0, 0, 0, 0.2)') |>
  add_region(
    xy = rbind(c(0, 80), c(160, 0), c(0, 0)),
    name = 'x_1+2x_2\\leq160',
    color = 'rgba(0, 255, 255, 0.3)') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 100), c(80, 100), c(80, 0)),
    name = 'x_1\\leq80',
    color = 'rgba(255, 255, 0, 0.3)') |>
  config(mathjax = 'cdn')
```

Теперь можно добавить график уровня функции и совместить его с графиком ограничений

```{r}
#| echo: false
#| warning: false
#| message: false

x <- seq(0, 80, length.out = 100)
y <- seq(0, 80, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
  x1 + 2 * x2
}) |> t()

plot_ly(x = x, y = y, z = z, type = 'contour') |>
  add_region(
    xy = rbind(c(0, 0), c(0, 80), c(60, 50), c(80, 100 / 3), c(80, 0)),
    name = 'region',
    color = 'rgba(0, 0, 0, 0.4)') |>
  config(mathjax = 'cdn')
```

Из графика следует то, что прямая постоянного уровня целевой функции $F(x)=x_1+2x_2$ совпала с прямой задающей ограничение $x_1+2x_2\leq160$. Значит все точки принадлежащие прямой проходящей через координаты $P(0,80)$ и $Q(60,50)$ будут соответствовать оптимальному решению.

```{r}
library(lpSolve)
Fun <- c(1, 2)
A <- rbind(c(0, 1), c(5, 6), c(1, 2))
B <- c(80, 600, 160)
CD <- c('<=', '<=', '<=')

optimum <- lp(
  direction = 'max',
  objective.in = Fun,
  const.mat = A,
  const.dir = CD,
  const.rhs = B,
  compute.sens = TRUE)

optimum
optimum$solution
```

Процедура поиска решения находит только одну точку.

```{r}
optimum$sens.coef.from
optimum$sens.coef.to
```

Анализ чувствительности показывает, что активно только ограничение $x_1+2x_2\leq160$, а соответствующее значенеи $\xi=1$

```{r}
optimum$duals
optimum$duals.from
optimum$duals.to
```

### Отсутствие допустимых решений

В данном случае условия ограничений не совместимы.

$$\begin{cases}
      \max{F(x)=200x_1+300x_2}\\
      2x_1+3x_2\geq1200\\
      x_1+x_2\leq400\\
      2x_1+1.5x_2\geq900\\
      x1,x2\geq0
\end{cases}$$

```{r}
#| echo: false
#| warning: false
#| message: false

plot_ly(mode = 'lines+markers') |>
  add_region(
    xy = rbind(c(600, 0), c(0, 400), c(0, 600), c(600, 600)),
    name = '2x_1+3x_2\\geq1200',
    color = 'rgba(0, 255, 255, 0.3)') |>
  add_region(
    xy = rbind(c(0, 0), c(400, 0), c(0, 400)),
    name = 'x_1+x_2\\leq400',
    color = 'rgba(51, 0, 153, 0.3)') |>
  add_region(
    xy = rbind(c(0, 600), c(450, 0), c(600, 0), c(600, 600)),
    name = '2x_1+1.5x_2\\geq900',
    color = 'rgba(255, 255, 0, 0.4)') |>
  config(mathjax = 'cdn')
```

```{r}
library(lpSolve)
Fun <- c(200, 300)
A <- rbind(c(2, 3), c(1, 2), c(2, 1.5))
B <- c(1200, 400, 900)
CD <- c('>=', '<=', '>=')

optimum <- lp(
  direction = 'max',
  objective.in = Fun,
  const.mat = A,
  const.dir = CD,
  const.rhs = B,
  compute.sens = TRUE)

optimum
optimum$solution
```

Процедура поиска решения завершается с ошибкой

### Неограниченность решений

Если область поиска решения не ограничена, то одна или несколько переменных будут увеличиваться бесконечно, не нарушая ограничений, а значение целевой функции можно принимать произвольно большие значения. Рассмотрим следующую модель:

$$\begin{cases}
      \max{F(x)=40x_1+60x_2}\\
      2x_1+x_2\geq70\\
      x_1+x_2\geq40\\
      x_1+3x_2\geq90\\
      x1,x2\geq0
\end{cases}$$

```{r}
#| echo: false
#| warning: false
#| message: false

plot_ly(mode = 'lines+markers') |>
  add_region(
    xy = rbind(c(0, 40), c(0, 35), c(70, 0), c(90, 0), c(90, 40)),
    name = '2x_1+x_2\\geq70',
    color = 'rgba(0, 0, 0, 0.2)') |>
  add_region(
    xy = rbind(c(0, 40), c(40, 0), c(90, 0), c(90, 40)),
    name = 'x_1+x_2\\leq40',
    color = 'rgba(0, 255, 255, 0.3)') |>
  add_region(
    xy = rbind(c(0, 40), c(0, 30), c(90, 0), c(90, 40)),
    name = 'x_1+3x_2\\geq90',
    color = 'rgba(255, 255, 0, 0.4)') |>
  config(mathjax = 'cdn')
```

Объединяя добавляя контурный график

Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.

```{r}
#| echo: false
#| warning: false
#| message: false

x <- seq(0, 90, length.out = 100)
y <- seq(0, 40, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
  40 * x1 + 60 * x2
}) |> t()

plot_ly(x = x, y = y, z = z, type = 'contour', colorscale = 'YlOrRd') |>
  add_region(
    xy = rbind(c(15, 40), c(24, 22), c(90, 0), c(90, 40)),
    name = 'region',
    color = 'rgba(255, 255, 255, 0.5)') |>
  config(mathjax = 'cdn')
```

Ограничения заданные в этом примере не ограничивают область поиска в направлениии $x\to\infty$ и $y\to\infty$. Целевая функция неограниченно возрастает в этом направлении, следовательно и решение неограниченно.

```{r}
library(lpSolve)
Fun <- c(40, 60)
A <- rbind(c(2, 1), c(1, 1), c(1, 3))
B <- c(70, 40, 90)
CD <- c('>=', '>=', '>=')

optimum <- lp(
  direction = 'max',
  objective.in = Fun,
  const.mat = A,
  const.dir = CD,
  const.rhs = B,
  compute.sens = TRUE)

optimum
optimum$solution
```

Процедура поиска решения завершается с ошибкой 3: *UNBOUNDED (3) The model is unbounded*.

## Вырожденность
